"""
This type stub file was generated by pyright.
"""

from contextlib import contextmanager
from .utils import Comparable

"""
Customisable progressbar decora"""
__author__ = ...
__all__ = ['tqdm', 'trange', 'TqdmTypeError', 'TqdmKeyError', 'TqdmWarning', 'TqdmExperimentalWarning', 'TqdmDeprecationWarning', 'TqdmMonitorWarning']
class TqdmTypeError(TypeError):
    ...


class TqdmKeyError(KeyError):
    ...


class TqdmWarning(Warning):
    """base class for all tqdm warnings"""
    def __init__(self, msg, fp_write=..., *a, **k) -> None:
        ...
    


class TqdmExperimentalWarning(TqdmWarning, FutureWarning):
    """beta feature, unstable API and b"""
    ...


class TqdmDeprecationWarning(TqdmWarning, DeprecationWarning):
    ...


class TqdmMonitorWarning(TqdmWarning, RuntimeWarning):
    """tqdm monitor errors which do not"""
    ...


def TRLock(*args, **kwargs): # -> RLock | None:
    """threading RLock"""
    ...

class TqdmDefaultWriteLock:
    """
    Provide a default write loc"""
    th_lock = ...
    def __init__(self) -> None:
        ...
    
    def acquire(self, *a, **k): # -> None:
        ...
    
    def release(self): # -> None:
        ...
    
    def __enter__(self): # -> None:
        ...
    
    def __exit__(self, *exc): # -> None:
        ...
    
    @classmethod
    def create_mp_lock(cls): # -> None:
        ...
    
    @classmethod
    def create_th_lock(cls): # -> None:
        ...
    


class Bar:
    """
    `str.format`-able bar with """
    ASCII = ...
    UTF = ...
    BLANK = ...
    COLOUR_RESET = ...
    COLOUR_RGB = ...
    COLOURS = ...
    def __init__(self, frac, default_len=..., charset=..., colour=...) -> None:
        ...
    
    @property
    def colour(self): # -> str | None:
        ...
    
    @colour.setter
    def colour(self, value):
        ...
    
    def __format__(self, format_spec): # -> str:
        ...
    


class EMA:
    """
    Exponential moving average:"""
    def __init__(self, smoothing=...) -> None:
        ...
    
    def __call__(self, x=...): # -> Any | int:
        """
        Parameters
        ----"""
        ...
    


class tqdm(Comparable):
    """
    Decorate an iterable object"""
    monitor_interval = ...
    monitor = ...
    _instances = ...
    @staticmethod
    def format_sizeof(num, suffix=..., divisor=...): # -> str:
        """
        Formats a number (great"""
        ...
    
    @staticmethod
    def format_interval(t): # -> str:
        """
        Formats a number of sec"""
        ...
    
    @staticmethod
    def format_num(n): # -> str:
        """
        Intelligent scientific """
        ...
    
    @staticmethod
    def status_printer(file): # -> (s: Unknown) -> None:
        """
        Manage the printing and"""
        ...
    
    @staticmethod
    def format_meter(n, total, elapsed, ncols=..., prefix=..., ascii=..., unit=..., unit_scale=..., rate=..., bar_format=..., postfix=..., unit_divisor=..., initial=..., colour=..., **extra_kwargs):
        """
        Return a string-based p"""
        ...
    
    def __new__(cls, *_, **__): # -> Self@tqdm:
        ...
    
    @classmethod
    def write(cls, s, file=..., end=..., nolock=...): # -> None:
        """Print a message via tqdm (withou"""
        ...
    
    @classmethod
    @contextmanager
    def external_write_mode(cls, file=..., nolock=...):
        """
        Disable tqdm within con"""
        ...
    
    @classmethod
    def set_lock(cls, lock): # -> None:
        """Set the global lock."""
        ...
    
    @classmethod
    def get_lock(cls): # -> TqdmDefaultWriteLock:
        """Get the global lock. Construct i"""
        ...
    
    @classmethod
    def pandas(cls, **tqdm_kwargs):
        """
        Registers the current `"""
        ...
    
    def __init__(self, iterable=..., desc=..., total=..., leave=..., file=..., ncols=..., mininterval=..., maxinterval=..., miniters=..., ascii=..., disable=..., unit=..., unit_scale=..., dynamic_ncols=..., smoothing=..., bar_format=..., initial=..., position=..., postfix=..., unit_divisor=..., write_bytes=..., lock_args=..., nrows=..., colour=..., delay=..., gui=..., **kwargs) -> None:
        """
        Parameters
        ----"""
        ...
    
    def __bool__(self): # -> bool:
        ...
    
    def __nonzero__(self): # -> bool:
        ...
    
    def __len__(self): # -> int | Any | None:
        ...
    
    def __reversed__(self): # -> Generator[Unknown, None, None]:
        ...
    
    def __contains__(self, item): # -> Any | bool:
        ...
    
    def __enter__(self): # -> Self@tqdm:
        ...
    
    def __exit__(self, exc_type, exc_value, traceback): # -> None:
        ...
    
    def __del__(self): # -> None:
        ...
    
    def __str__(self) -> str:
        ...
    
    def __hash__(self) -> int:
        ...
    
    def __iter__(self): # -> Generator[Unknown, None, None]:
        """Backward-compatibility to use: f"""
        ...
    
    def update(self, n=...):
        """
        Manually update the pro"""
        ...
    
    def close(self): # -> None:
        """Cleanup and (if leave=False) clo"""
        ...
    
    def clear(self, nolock=...): # -> None:
        """Clear current bar display."""
        ...
    
    def refresh(self, nolock=..., lock_args=...): # -> bool | None:
        """
        Force refresh the displ"""
        ...
    
    def unpause(self): # -> None:
        """Restart tqdm timer from last pri"""
        ...
    
    def reset(self, total=...): # -> None:
        """
        Resets to 0 iterations """
        ...
    
    def set_description(self, desc=..., refresh=...): # -> None:
        """
        Set/modify description """
        ...
    
    def set_description_str(self, desc=..., refresh=...): # -> None:
        """Set/modify description without '"""
        ...
    
    def set_postfix(self, ordered_dict=..., refresh=..., **kwargs): # -> None:
        """
        Set/modify postfix (add"""
        ...
    
    def set_postfix_str(self, s=..., refresh=...): # -> None:
        """
        Postfix without diction"""
        ...
    
    def moveto(self, n): # -> None:
        ...
    
    @property
    def format_dict(self): # -> defaultdict[str, None] | dict[str, Unknown | int | float | Any | str | bool | None]:
        """Public API for read-only member """
        ...
    
    def display(self, msg=..., pos=...):
        """
        Use `self.sp` to displa"""
        ...
    
    @classmethod
    @contextmanager
    def wrapattr(cls, stream, method, total=..., bytes=..., **tqdm_kwargs): # -> Generator[CallbackIOWrapper, None, None]:
        """
        stream  : file-like obj"""
        ...
    


def trange(*args, **kwargs): # -> tqdm:
    """
    A shortcut for tqdm(xrange("""
    ...

