"""
This type stub file was generated by pyright.
"""

"""Utility functions and classes."""
class Length(int):
    """
    Base class for length class"""
    _EMUS_PER_INCH = ...
    _EMUS_PER_CENTIPOINT = ...
    _EMUS_PER_CM = ...
    _EMUS_PER_MM = ...
    _EMUS_PER_PT = ...
    def __new__(cls, emu): # -> Self@Length:
        ...
    
    @property
    def inches(self): # -> float:
        """
        Floating point length i"""
        ...
    
    @property
    def centipoints(self): # -> int:
        """
        Integer length in hundr"""
        ...
    
    @property
    def cm(self): # -> float:
        """
        Floating point length i"""
        ...
    
    @property
    def emu(self): # -> Self@Length:
        """
        Integer length in Engli"""
        ...
    
    @property
    def mm(self): # -> float:
        """
        Floating point length i"""
        ...
    
    @property
    def pt(self): # -> float:
        """
        Floating point length i"""
        ...
    


class Inches(Length):
    """
    Convenience constructor for"""
    def __new__(cls, inches): # -> Length:
        ...
    


class Centipoints(Length):
    """
    Convenience constructor for"""
    def __new__(cls, centipoints): # -> Length:
        ...
    


class Cm(Length):
    """
    Convenience constructor for"""
    def __new__(cls, cm): # -> Length:
        ...
    


class Emu(Length):
    """
    Convenience constructor for"""
    def __new__(cls, emu): # -> Length:
        ...
    


class Mm(Length):
    """
    Convenience constructor for"""
    def __new__(cls, mm): # -> Length:
        ...
    


class Pt(Length):
    """
    Convenience value class for"""
    def __new__(cls, points): # -> Length:
        ...
    


class lazyproperty:
    """Decorator like @property, but ev"""
    def __init__(self, fget) -> None:
        """*fget* is the decorated method ("""
        ...
    
    def __get__(self, obj, type=...): # -> Self@lazyproperty:
        """Called on each access of 'fget' """
        ...
    
    def __set__(self, obj, value):
        """Raises unconditionally, to prese"""
        ...
    


