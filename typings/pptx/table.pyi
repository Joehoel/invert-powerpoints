"""
This type stub file was generated by pyright.
"""

from pptx.shapes import Subshape
from pptx.util import lazyproperty

"""Table-related objects such as Ta"""
class Table:
    """A DrawingML table object.

    N"""
    def __init__(self, tbl, graphic_frame) -> None:
        ...
    
    def cell(self, row_idx, col_idx): # -> _Cell:
        """Return cell at *row_idx*, *col_i"""
        ...
    
    @lazyproperty
    def columns(self): # -> _ColumnCollection:
        """|_ColumnCollection| instance for"""
        ...
    
    @property
    def first_col(self):
        """
        Read/write boolean prop"""
        ...
    
    @first_col.setter
    def first_col(self, value): # -> None:
        ...
    
    @property
    def first_row(self):
        """
        Read/write boolean prop"""
        ...
    
    @first_row.setter
    def first_row(self, value): # -> None:
        ...
    
    @property
    def horz_banding(self):
        """
        Read/write boolean prop"""
        ...
    
    @horz_banding.setter
    def horz_banding(self, value): # -> None:
        ...
    
    def iter_cells(self): # -> Generator[_Cell, None, None]:
        """Generate _Cell object for each c"""
        ...
    
    @property
    def last_col(self):
        """
        Read/write boolean prop"""
        ...
    
    @last_col.setter
    def last_col(self, value): # -> None:
        ...
    
    @property
    def last_row(self):
        """
        Read/write boolean prop"""
        ...
    
    @last_row.setter
    def last_row(self, value): # -> None:
        ...
    
    def notify_height_changed(self): # -> None:
        """
        Called by a row when it"""
        ...
    
    def notify_width_changed(self): # -> None:
        """
        Called by a column when"""
        ...
    
    @property
    def part(self):
        """
        The package part contai"""
        ...
    
    @lazyproperty
    def rows(self): # -> _RowCollection:
        """|_RowCollection| instance for th"""
        ...
    
    @property
    def vert_banding(self):
        """
        Read/write boolean prop"""
        ...
    
    @vert_banding.setter
    def vert_banding(self, value): # -> None:
        ...
    


class _Cell(Subshape):
    """Table cell"""
    def __init__(self, tc, parent) -> None:
        ...
    
    def __eq__(self, other) -> bool:
        """|True| if this object proxies th"""
        ...
    
    def __ne__(self, other) -> bool:
        ...
    
    @lazyproperty
    def fill(self): # -> FillFormat:
        """
        |FillFormat| instance f"""
        ...
    
    @property
    def is_merge_origin(self):
        """True if this cell is the top-lef"""
        ...
    
    @property
    def is_spanned(self):
        """True if this cell is spanned by """
        ...
    
    @property
    def margin_left(self):
        """
        Read/write integer valu"""
        ...
    
    @margin_left.setter
    def margin_left(self, margin_left): # -> None:
        ...
    
    @property
    def margin_right(self):
        """
        Right margin of cell.
 """
        ...
    
    @margin_right.setter
    def margin_right(self, margin_right): # -> None:
        ...
    
    @property
    def margin_top(self):
        """
        Top margin of cell.
   """
        ...
    
    @margin_top.setter
    def margin_top(self, margin_top): # -> None:
        ...
    
    @property
    def margin_bottom(self):
        """
        Bottom margin of cell.
"""
        ...
    
    @margin_bottom.setter
    def margin_bottom(self, margin_bottom): # -> None:
        ...
    
    def merge(self, other_cell): # -> None:
        """Create merged cell from this cel"""
        ...
    
    @property
    def span_height(self):
        """int count of rows spanned by thi"""
        ...
    
    @property
    def span_width(self):
        """int count of columns spanned by """
        ...
    
    def split(self): # -> None:
        """Remove merge from this (merge-or"""
        ...
    
    @property
    def text(self): # -> str:
        """Unicode (str in Python 3) repres"""
        ...
    
    @text.setter
    def text(self, text): # -> None:
        ...
    
    @property
    def text_frame(self): # -> TextFrame:
        """
        |TextFrame| instance co"""
        ...
    
    @property
    def vertical_anchor(self):
        """Vertical alignment of this cell."""
        ...
    
    @vertical_anchor.setter
    def vertical_anchor(self, mso_anchor_idx): # -> None:
        ...
    


class _Column(Subshape):
    """Table column"""
    def __init__(self, gridCol, parent) -> None:
        ...
    
    @property
    def width(self):
        """
        Width of column in EMU."""
        ...
    
    @width.setter
    def width(self, width): # -> None:
        ...
    


class _Row(Subshape):
    """Table row"""
    def __init__(self, tr, parent) -> None:
        ...
    
    @property
    def cells(self): # -> _CellCollection:
        """
        Read-only reference to """
        ...
    
    @property
    def height(self):
        """
        Height of row in EMU.
 """
        ...
    
    @height.setter
    def height(self, height): # -> None:
        ...
    


class _CellCollection(Subshape):
    """Horizontal sequence of row cells"""
    def __init__(self, tr, parent) -> None:
        ...
    
    def __getitem__(self, idx): # -> _Cell:
        """Provides indexed access, (e.g. '"""
        ...
    
    def __iter__(self): # -> Generator[_Cell, None, None]:
        """Provides iterability."""
        ...
    
    def __len__(self): # -> int:
        """Supports len() function (e.g. 'l"""
        ...
    


class _ColumnCollection(Subshape):
    """Sequence of table columns."""
    def __init__(self, tbl, parent) -> None:
        ...
    
    def __getitem__(self, idx): # -> _Column:
        """
        Provides indexed access"""
        ...
    
    def __len__(self): # -> int:
        """
        Supports len() function"""
        ...
    
    def notify_width_changed(self): # -> None:
        """
        Called by a column when"""
        ...
    


class _RowCollection(Subshape):
    """Sequence of table rows"""
    def __init__(self, tbl, parent) -> None:
        ...
    
    def __getitem__(self, idx): # -> _Row:
        """
        Provides indexed access"""
        ...
    
    def __len__(self): # -> int:
        """
        Supports len() function"""
        ...
    
    def notify_height_changed(self): # -> None:
        """
        Called by a row when it"""
        ...
    


