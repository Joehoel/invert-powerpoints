"""
This type stub file was generated by pyright.
"""

"""Objects related to layout of ren"""
class TextFitter(tuple):
    """
    Value object that knows how"""
    def __new__(cls, line_source, extents, font_file): # -> Self@TextFitter:
        ...
    
    @classmethod
    def best_fit_font_size(cls, text, extents, max_size, font_file): # -> Unknown | None:
        """Return whole-number best fit poi"""
        ...
    


class _BinarySearchTree:
    """
    A node in a binary search t"""
    def __init__(self, value) -> None:
        ...
    
    def find_max(self, predicate, max_=...): # -> Unknown | None:
        """
        Return the largest item"""
        ...
    
    @classmethod
    def from_ordered_sequence(cls, iseq): # -> Self@_BinarySearchTree:
        """
        Return the root of a ba"""
        ...
    
    def insert(self, value): # -> None:
        """
        Insert a new node conta"""
        ...
    
    def tree(self, level=..., prefix=...): # -> str:
        """
        A string representation"""
        ...
    
    @property
    def value(self): # -> Unknown:
        """
        The value object contai"""
        ...
    


class _LineSource:
    """
    Generates all the possible """
    def __init__(self, text) -> None:
        ...
    
    def __bool__(self):
        """
        Gives this object boole"""
        ...
    
    def __eq__(self, other) -> bool:
        ...
    
    def __iter__(self): # -> Generator[_Line, None, None]:
        """
        Generate a (text, remai"""
        ...
    
    def __nonzero__(self):
        """
        Gives this object boole"""
        ...
    
    def __repr__(self): # -> str:
        ...
    


class _Line(tuple):
    """
    A candidate line broken at """
    def __new__(cls, text, remainder): # -> Self@_Line:
        ...
    
    def __gt__(self, other) -> bool:
        ...
    
    def __lt__(self, other) -> bool:
        ...
    
    def __len__(self): # -> int:
        ...
    
    def __repr__(self): # -> str:
        ...
    
    @property
    def remainder(self):
        ...
    
    @property
    def text(self):
        ...
    


class _Fonts:
    """
    A memoizing cache for Image"""
    fonts = ...
    @classmethod
    def font(cls, font_path, point_size):
        ...
    


