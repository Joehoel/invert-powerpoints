"""
This type stub file was generated by pyright.
"""

"""Objects related to system font f"""
class FontFiles:
    """
    A class-based singleton ser"""
    _font_files = ...
    @classmethod
    def find(cls, family_name, is_bold, is_italic):
        """
        Return the absolute pat"""
        ...
    


class _Font:
    """
    A wrapper around an OTF/TTF"""
    def __init__(self, stream) -> None:
        ...
    
    def __enter__(self): # -> Self@_Font:
        ...
    
    def __exit__(self, exception_type, exception_value, exception_tb): # -> None:
        ...
    
    @property
    def is_bold(self): # -> Literal[False]:
        """
        |True| if this font is """
        ...
    
    @property
    def is_italic(self): # -> Literal[False]:
        """
        |True| if this font is """
        ...
    
    @classmethod
    def open(cls, font_file_path): # -> Self@_Font:
        """
        Return a |_Font| instan"""
        ...
    
    @property
    def family_name(self):
        """
        The name of the typefac"""
        ...
    


class _Stream:
    """A thin wrapper around a binary f"""
    def __init__(self, file) -> None:
        ...
    
    @classmethod
    def open(cls, path): # -> Self@_Stream:
        """Return |_Stream| providing binar"""
        ...
    
    def close(self): # -> None:
        """
        Close the wrapped file."""
        ...
    
    def read(self, offset, length):
        """
        Return *length* bytes f"""
        ...
    
    def read_fields(self, template, offset=...): # -> tuple[Any, ...]:
        """
        Return a tuple containi"""
        ...
    


class _BaseTable:
    """
    Base class for OpenType fon"""
    def __init__(self, tag, stream, offset, length) -> None:
        ...
    


class _HeadTable(_BaseTable):
    """
    OpenType font table having """
    def __init__(self, tag, stream, offset, length) -> None:
        ...
    
    @property
    def is_bold(self): # -> bool:
        """
        |True| if this font is """
        ...
    
    @property
    def is_italic(self): # -> bool:
        """
        |True| if this font is """
        ...
    


class _NameTable(_BaseTable):
    """
    An OpenType font table havi"""
    def __init__(self, tag, stream, offset, length) -> None:
        ...
    
    @property
    def family_name(self): # -> None:
        """
        The name of the typefac"""
        ...
    


