"""
This type stub file was generated by pyright.
"""

from pptx.shapes import Subshape
from pptx.util import lazyproperty

"""Text-related objects such as Tex"""
class TextFrame(Subshape):
    """The part of a shape that contain"""
    def __init__(self, txBody, parent) -> None:
        ...
    
    def add_paragraph(self): # -> _Paragraph:
        """
        Return new |_Paragraph|"""
        ...
    
    @property
    def auto_size(self):
        """
        The type of automatic r"""
        ...
    
    @auto_size.setter
    def auto_size(self, value): # -> None:
        ...
    
    def clear(self): # -> None:
        """Remove all paragraphs except one"""
        ...
    
    def fit_text(self, font_family=..., max_size=..., bold=..., italic=..., font_file=...): # -> None:
        """Fit text-frame text entirely wit"""
        ...
    
    @property
    def margin_bottom(self):
        """
        |Length| value represen"""
        ...
    
    @margin_bottom.setter
    def margin_bottom(self, emu): # -> None:
        ...
    
    @property
    def margin_left(self):
        """
        Inset of text from left"""
        ...
    
    @margin_left.setter
    def margin_left(self, emu): # -> None:
        ...
    
    @property
    def margin_right(self):
        """
        Inset of text from righ"""
        ...
    
    @margin_right.setter
    def margin_right(self, emu): # -> None:
        ...
    
    @property
    def margin_top(self):
        """
        Inset of text from top """
        ...
    
    @margin_top.setter
    def margin_top(self, emu): # -> None:
        ...
    
    @property
    def paragraphs(self): # -> tuple[_Paragraph, ...]:
        """
        Immutable sequence of |"""
        ...
    
    @property
    def text(self): # -> str:
        """Unicode/str containing all text """
        ...
    
    @text.setter
    def text(self, text): # -> None:
        ...
    
    @property
    def vertical_anchor(self):
        """
        Read/write member of :r"""
        ...
    
    @vertical_anchor.setter
    def vertical_anchor(self, value): # -> None:
        ...
    
    @property
    def word_wrap(self): # -> bool | None:
        """
        Read-write setting dete"""
        ...
    
    @word_wrap.setter
    def word_wrap(self, value): # -> None:
        ...
    


class Font:
    """
    Character properties object"""
    def __init__(self, rPr) -> None:
        ...
    
    @property
    def bold(self):
        """
        Get or set boolean bold"""
        ...
    
    @bold.setter
    def bold(self, value): # -> None:
        ...
    
    @lazyproperty
    def color(self):
        """
        The |ColorFormat| insta"""
        ...
    
    @lazyproperty
    def fill(self): # -> FillFormat:
        """
        |FillFormat| instance f"""
        ...
    
    @property
    def italic(self):
        """
        Get or set boolean ital"""
        ...
    
    @italic.setter
    def italic(self, value): # -> None:
        ...
    
    @property
    def language_id(self):
        """
        Get or set the language"""
        ...
    
    @language_id.setter
    def language_id(self, value): # -> None:
        ...
    
    @property
    def name(self): # -> None:
        """
        Get or set the typeface"""
        ...
    
    @name.setter
    def name(self, value): # -> None:
        ...
    
    @property
    def size(self): # -> Length | None:
        """
        Read/write |Length| val"""
        ...
    
    @size.setter
    def size(self, emu): # -> None:
        ...
    
    @property
    def underline(self): # -> bool:
        """
        Read/write. |True|, |Fa"""
        ...
    
    @underline.setter
    def underline(self, value): # -> None:
        ...
    


class _Hyperlink(Subshape):
    """
    Text run hyperlink object. """
    def __init__(self, rPr, parent) -> None:
        ...
    
    @property
    def address(self): # -> None:
        """
        Read/write. The URL of """
        ...
    
    @address.setter
    def address(self, url): # -> None:
        ...
    


class _Paragraph(Subshape):
    """Paragraph object. Not intended t"""
    def __init__(self, p, parent) -> None:
        ...
    
    def add_line_break(self): # -> None:
        """Add line break at end of this pa"""
        ...
    
    def add_run(self): # -> _Run:
        """
        Return a new run append"""
        ...
    
    @property
    def alignment(self):
        """
        Horizontal alignment of"""
        ...
    
    @alignment.setter
    def alignment(self, value): # -> None:
        ...
    
    def clear(self): # -> Self@_Paragraph:
        """
        Remove all content from"""
        ...
    
    @property
    def font(self): # -> Font:
        """
        |Font| object containin"""
        ...
    
    @property
    def level(self):
        """
        Read-write integer inde"""
        ...
    
    @level.setter
    def level(self, level): # -> None:
        ...
    
    @property
    def line_spacing(self): # -> None:
        """
        Numeric or |Length| val"""
        ...
    
    @line_spacing.setter
    def line_spacing(self, value): # -> None:
        ...
    
    @property
    def runs(self): # -> tuple[_Run, ...]:
        """
        Immutable sequence of |"""
        ...
    
    @property
    def space_after(self): # -> None:
        """
        |Length| value specifyi"""
        ...
    
    @space_after.setter
    def space_after(self, value): # -> None:
        ...
    
    @property
    def space_before(self): # -> None:
        """
        |Length| value specifyi"""
        ...
    
    @space_before.setter
    def space_before(self, value): # -> None:
        ...
    
    @property
    def text(self): # -> str:
        """str (unicode) representation of """
        ...
    
    @text.setter
    def text(self, text): # -> None:
        ...
    


class _Run(Subshape):
    """Text run object. Corresponds to """
    def __init__(self, r, parent) -> None:
        ...
    
    @property
    def font(self): # -> Font:
        """
        |Font| instance contain"""
        ...
    
    @lazyproperty
    def hyperlink(self): # -> _Hyperlink:
        """
        |_Hyperlink| instance a"""
        ...
    
    @property
    def text(self):
        """Read/write. A unicode string con"""
        ...
    
    @text.setter
    def text(self, str): # -> None:
        ...
    


