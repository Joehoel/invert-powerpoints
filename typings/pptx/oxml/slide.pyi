"""
This type stub file was generated by pyright.
"""

from pptx.oxml.xmlchemy import BaseOxmlElement

"""Slide-related custom element cla"""
class _BaseSlideElement(BaseOxmlElement):
    """
    Base class for the six slid"""
    @property
    def spTree(self):
        """
        Return required `p:cSld"""
        ...
    


class CT_Background(BaseOxmlElement):
    """`p:bg` element."""
    _tag_seq = ...
    bgPr = ...
    bgRef = ...
    def add_noFill_bgPr(self): # -> Any:
        """Return a new `p:bgPr` element wi"""
        ...
    


class CT_BackgroundProperties(BaseOxmlElement):
    """`p:bgPr` element."""
    _tag_seq = ...
    eg_fillProperties = ...


class CT_CommonSlideData(BaseOxmlElement):
    """`p:cSld` element."""
    _tag_seq = ...
    bg = ...
    spTree = ...
    name = ...
    def get_or_add_bgPr(self):
        """Return `p:bg/p:bgPr` grandchild."""
        ...
    


class CT_NotesMaster(_BaseSlideElement):
    """
    ``<p:notesMaster>`` element"""
    _tag_seq = ...
    cSld = ...
    @classmethod
    def new_default(cls): # -> Any:
        """
        Return a new ``<p:notes"""
        ...
    


class CT_NotesSlide(_BaseSlideElement):
    """
    ``<p:notes>`` element, root"""
    _tag_seq = ...
    cSld = ...
    @classmethod
    def new(cls): # -> Any:
        """
        Return a new ``<p:notes"""
        ...
    


class CT_Slide(_BaseSlideElement):
    """`p:sld` element, root element of"""
    _tag_seq = ...
    cSld = ...
    clrMapOvr = ...
    timing = ...
    @classmethod
    def new(cls): # -> Any:
        """Return new `p:sld` element confi"""
        ...
    
    @property
    def bg(self):
        """Return `p:bg` grandchild or None"""
        ...
    
    def get_or_add_childTnLst(self): # -> Any:
        """Return parent element for a new """
        ...
    


class CT_SlideLayout(_BaseSlideElement):
    """
    ``<p:sldLayout>`` element, """
    _tag_seq = ...
    cSld = ...


class CT_SlideLayoutIdList(BaseOxmlElement):
    """
    ``<p:sldLayoutIdLst>`` elem"""
    sldLayoutId = ...


class CT_SlideLayoutIdListEntry(BaseOxmlElement):
    """
    ``<p:sldLayoutId>`` element"""
    rId = ...


class CT_SlideMaster(_BaseSlideElement):
    """
    ``<p:sldMaster>`` element, """
    _tag_seq = ...
    cSld = ...
    sldLayoutIdLst = ...


class CT_SlideTiming(BaseOxmlElement):
    """`p:timing` element, specifying a"""
    _tag_seq = ...
    tnLst = ...


class CT_TimeNodeList(BaseOxmlElement):
    """`p:tnLst` or `p:childTnList` ele"""
    def add_video(self, shape_id): # -> None:
        """Add a new `p:video` child elemen"""
        ...
    


class CT_TLMediaNodeVideo(BaseOxmlElement):
    """`p:video` element, specifying vi"""
    _tag_seq = ...
    cMediaNode = ...


