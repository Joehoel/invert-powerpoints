"""
This type stub file was generated by pyright.
"""

from pptx.oxml.xmlchemy import BaseOxmlElement

"""Axis-related oxml objects."""
class BaseAxisElement(BaseOxmlElement):
    """Base class for catAx, dateAx, va"""
    @property
    def defRPr(self):
        """
        ``<a:defRPr>`` great-gr"""
        ...
    
    @property
    def orientation(self): # -> Literal['minMax']:
        """Value of `val` attribute of `c:s"""
        ...
    
    @orientation.setter
    def orientation(self, value): # -> None:
        """`value` is a member of `ST_Orien"""
        ...
    


class CT_AxisUnit(BaseOxmlElement):
    """Used for `c:majorUnit` and `c:mi"""
    val = ...


class CT_CatAx(BaseAxisElement):
    """`c:catAx` element, defining a ca"""
    _tag_seq = ...
    scaling = ...
    delete_ = ...
    majorGridlines = ...
    minorGridlines = ...
    title = ...
    numFmt = ...
    majorTickMark = ...
    minorTickMark = ...
    tickLblPos = ...
    spPr = ...
    txPr = ...
    crosses = ...
    crossesAt = ...
    lblOffset = ...


class CT_ChartLines(BaseOxmlElement):
    """Used for `c:majorGridlines` and """
    spPr = ...


class CT_Crosses(BaseOxmlElement):
    """`c:crosses` element, specifying """
    val = ...


class CT_DateAx(BaseAxisElement):
    """`c:dateAx` element, defining a d"""
    _tag_seq = ...
    scaling = ...
    delete_ = ...
    majorGridlines = ...
    minorGridlines = ...
    title = ...
    numFmt = ...
    majorTickMark = ...
    minorTickMark = ...
    tickLblPos = ...
    spPr = ...
    txPr = ...
    crosses = ...
    crossesAt = ...
    lblOffset = ...


class CT_LblOffset(BaseOxmlElement):
    """`c:lblOffset` custom element cla"""
    val = ...


class CT_Orientation(BaseOxmlElement):
    """`c:xAx/c:scaling/c:orientation` """
    val = ...


class CT_Scaling(BaseOxmlElement):
    """`c:scaling` element.

    Define"""
    _tag_seq = ...
    orientation = ...
    max = ...
    min = ...
    @property
    def maximum(self): # -> None:
        """
        The float value of the """
        ...
    
    @maximum.setter
    def maximum(self, value): # -> None:
        """
        Set the value of the ``"""
        ...
    
    @property
    def minimum(self): # -> None:
        """
        The float value of the """
        ...
    
    @minimum.setter
    def minimum(self, value): # -> None:
        """
        Set the value of the ``"""
        ...
    


class CT_TickLblPos(BaseOxmlElement):
    """`c:tickLblPos` element."""
    val = ...


class CT_TickMark(BaseOxmlElement):
    """Used for `c:minorTickMark` and `"""
    val = ...


class CT_ValAx(BaseAxisElement):
    """`c:valAx` element, defining a va"""
    _tag_seq = ...
    scaling = ...
    delete_ = ...
    majorGridlines = ...
    minorGridlines = ...
    title = ...
    numFmt = ...
    majorTickMark = ...
    minorTickMark = ...
    tickLblPos = ...
    spPr = ...
    txPr = ...
    crossAx = ...
    crosses = ...
    crossesAt = ...
    majorUnit = ...
    minorUnit = ...


