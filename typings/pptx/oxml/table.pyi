"""
This type stub file was generated by pyright.
"""

from pptx.oxml.xmlchemy import BaseOxmlElement
from pptx.util import lazyproperty

"""Custom element classes for table"""
class CT_Table(BaseOxmlElement):
    """`a:tbl` custom element class"""
    _tag_seq = ...
    tblPr = ...
    tblGrid = ...
    tr = ...
    def add_tr(self, height):
        """
        Return a reference to a"""
        ...
    
    @property
    def bandCol(self): # -> bool:
        ...
    
    @bandCol.setter
    def bandCol(self, value): # -> None:
        ...
    
    @property
    def bandRow(self): # -> bool:
        ...
    
    @bandRow.setter
    def bandRow(self, value): # -> None:
        ...
    
    @property
    def firstCol(self): # -> bool:
        ...
    
    @firstCol.setter
    def firstCol(self, value): # -> None:
        ...
    
    @property
    def firstRow(self): # -> bool:
        ...
    
    @firstRow.setter
    def firstRow(self, value): # -> None:
        ...
    
    def iter_tcs(self): # -> Generator[Unknown, None, None]:
        """Generate each `a:tc` element in """
        ...
    
    @property
    def lastCol(self): # -> bool:
        ...
    
    @lastCol.setter
    def lastCol(self, value): # -> None:
        ...
    
    @property
    def lastRow(self): # -> bool:
        ...
    
    @lastRow.setter
    def lastRow(self, value): # -> None:
        ...
    
    @classmethod
    def new_tbl(cls, rows, cols, width, height, tableStyleId=...): # -> Any:
        """Return a new ``<p:tbl>`` element"""
        ...
    
    def tc(self, row_idx, col_idx):
        """Return `a:tc` element at *row_id"""
        ...
    


class CT_TableCell(BaseOxmlElement):
    """`a:tc` custom element class"""
    _tag_seq = ...
    txBody = ...
    tcPr = ...
    gridSpan = ...
    rowSpan = ...
    hMerge = ...
    vMerge = ...
    @property
    def anchor(self): # -> None:
        """
        String held in ``anchor"""
        ...
    
    @anchor.setter
    def anchor(self, anchor_enum_idx): # -> None:
        """
        Set value of anchor att"""
        ...
    
    def append_ps_from(self, spanned_tc): # -> None:
        """Append `a:p` elements taken from"""
        ...
    
    @property
    def col_idx(self):
        """Offset of this cell's column in """
        ...
    
    @property
    def is_merge_origin(self): # -> bool:
        """True if cell is top-left in merg"""
        ...
    
    @property
    def is_spanned(self): # -> OptionalAttribute:
        """True if cell is in merged cell r"""
        ...
    
    @property
    def marT(self): # -> Length:
        """
        Read/write integer top """
        ...
    
    @marT.setter
    def marT(self, value): # -> None:
        ...
    
    @property
    def marR(self): # -> Length:
        """
        Right margin value repr"""
        ...
    
    @marR.setter
    def marR(self, value): # -> None:
        ...
    
    @property
    def marB(self): # -> Length:
        """
        Bottom margin value rep"""
        ...
    
    @marB.setter
    def marB(self, value): # -> None:
        ...
    
    @property
    def marL(self): # -> Length:
        """
        Left margin value repre"""
        ...
    
    @marL.setter
    def marL(self, value): # -> None:
        ...
    
    @classmethod
    def new(cls): # -> Any:
        """Return a new `a:tc` element subt"""
        ...
    
    @property
    def row_idx(self):
        """Offset of this cell's row in its"""
        ...
    
    @property
    def tbl(self):
        """Table element this cell belongs """
        ...
    
    @property
    def text(self): # -> str:
        """str text contained in cell"""
        ...
    


class CT_TableCellProperties(BaseOxmlElement):
    """`a:tcPr` custom element class"""
    eg_fillProperties = ...
    anchor = ...
    marL = ...
    marR = ...
    marT = ...
    marB = ...


class CT_TableCol(BaseOxmlElement):
    """
    ``<a:gridCol>`` custom elem"""
    w = ...


class CT_TableGrid(BaseOxmlElement):
    """
    ``<a:tblGrid>`` custom elem"""
    gridCol = ...
    def add_gridCol(self, width):
        """
        Return a reference to a"""
        ...
    


class CT_TableProperties(BaseOxmlElement):
    """
    ``<a:tblPr>`` custom elemen"""
    bandRow = ...
    bandCol = ...
    firstRow = ...
    firstCol = ...
    lastRow = ...
    lastCol = ...


class CT_TableRow(BaseOxmlElement):
    """
    ``<a:tr>`` custom element c"""
    tc = ...
    h = ...
    def add_tc(self):
        """
        Return a reference to a"""
        ...
    
    @property
    def row_idx(self):
        """Offset of this row in its table."""
        ...
    


class TcRange:
    """A 2D block of `a:tc` cell elemen"""
    def __init__(self, tc, other_tc) -> None:
        ...
    
    @classmethod
    def from_merge_origin(cls, tc): # -> Self@TcRange:
        """Return instance created from mer"""
        ...
    
    @lazyproperty
    def contains_merged_cell(self): # -> bool:
        """True if one or more cells in ran"""
        ...
    
    @lazyproperty
    def dimensions(self): # -> tuple[Unknown, Unknown]:
        """(row_count, col_count) pair desc"""
        ...
    
    @lazyproperty
    def in_same_table(self): # -> bool:
        """True if both cells provided to c"""
        ...
    
    def iter_except_left_col_tcs(self): # -> Generator[Unknown, None, None]:
        """Generate each `a:tc` element not"""
        ...
    
    def iter_except_top_row_tcs(self): # -> Generator[Unknown, None, None]:
        """Generate each `a:tc` element in """
        ...
    
    def iter_left_col_tcs(self): # -> Generator[Unknown, None, None]:
        """Generate each `a:tc` element in """
        ...
    
    def iter_tcs(self): # -> Generator[Unknown, None, None]:
        """Generate each `a:tc` element in """
        ...
    
    def iter_top_row_tcs(self): # -> Generator[Unknown, None, None]:
        """Generate each `a:tc` element in """
        ...
    
    def move_content_to_origin(self): # -> None:
        """Move all paragraphs in range to """
        ...
    


