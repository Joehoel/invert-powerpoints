"""
This type stub file was generated by pyright.
"""

from pptx.oxml.shapes.shared import BaseShapeElement
from pptx.oxml.xmlchemy import BaseOxmlElement

"""lxml custom element classes for """
class CT_GroupShape(BaseShapeElement):
    """
    Used for the shape tree (``"""
    nvGrpSpPr = ...
    grpSpPr = ...
    _shape_tags = ...
    def add_autoshape(self, id_, name, prst, x, y, cx, cy): # -> Any:
        """
        Append a new ``<p:sp>``"""
        ...
    
    def add_cxnSp(self, id_, name, type_member, x, y, cx, cy, flipH, flipV): # -> Any:
        """
        Append a new ``<p:cxnSp"""
        ...
    
    def add_freeform_sp(self, x, y, cx, cy): # -> Any:
        """Append a new freeform `p:sp` wit"""
        ...
    
    def add_grpSp(self): # -> Any:
        """Return `p:grpSp` element newly a"""
        ...
    
    def add_pic(self, id_, name, desc, rId, x, y, cx, cy): # -> Any:
        """
        Append a ``<p:pic>`` sh"""
        ...
    
    def add_placeholder(self, id_, name, ph_type, orient, sz, idx): # -> Any:
        """
        Append a newly-created """
        ...
    
    def add_table(self, id_, name, rows, cols, x, y, cx, cy): # -> Any:
        """
        Append a ``<p:graphicFr"""
        ...
    
    def add_textbox(self, id_, name, x, y, cx, cy): # -> Any:
        """
        Append a newly-created """
        ...
    
    @property
    def chExt(self):
        """Descendent `p:grpSpPr/a:xfrm/a:c"""
        ...
    
    @property
    def chOff(self):
        """Descendent `p:grpSpPr/a:xfrm/a:c"""
        ...
    
    def get_or_add_xfrm(self):
        """
        Return the ``<a:xfrm>``"""
        ...
    
    def iter_ph_elms(self): # -> Generator[Unknown, None, None]:
        """
        Generate each placehold"""
        ...
    
    def iter_shape_elms(self): # -> Generator[Unknown, None, None]:
        """
        Generate each child of """
        ...
    
    @property
    def max_shape_id(self): # -> int:
        """Maximum int value assigned as @i"""
        ...
    
    @classmethod
    def new_grpSp(cls, id_, name): # -> Any:
        """Return new "loose" `p:grpSp` ele"""
        ...
    
    def recalculate_extents(self): # -> None:
        """Adjust x, y, cx, and cy to incor"""
        ...
    
    @property
    def xfrm(self):
        """
        The ``<a:xfrm>`` grandc"""
        ...
    


class CT_GroupShapeNonVisual(BaseShapeElement):
    """
    ``<p:nvGrpSpPr>`` element.
"""
    cNvPr = ...


class CT_GroupShapeProperties(BaseOxmlElement):
    """p:grpSpPr element """
    _tag_seq = ...
    xfrm = ...
    effectLst = ...


