"""
This type stub file was generated by pyright.
"""

from pptx.oxml.shapes.shared import BaseShapeElement
from pptx.oxml.xmlchemy import BaseOxmlElement

"""
lxml custom element classes for"""
class CT_AdjPoint2D(BaseOxmlElement):
    """`a:pt` custom element class."""
    x = ...
    y = ...


class CT_CustomGeometry2D(BaseOxmlElement):
    """`a:custGeom` custom element clas"""
    _tag_seq = ...
    pathLst = ...


class CT_GeomGuide(BaseOxmlElement):
    """
    ``<a:gd>`` custom element c"""
    name = ...
    fmla = ...


class CT_GeomGuideList(BaseOxmlElement):
    """
    ``<a:avLst>`` custom elemen"""
    gd = ...


class CT_NonVisualDrawingShapeProps(BaseShapeElement):
    """
    ``<p:cNvSpPr>`` custom elem"""
    spLocks = ...
    txBox = ...


class CT_Path2D(BaseOxmlElement):
    """`a:path` custom element class."""
    close = ...
    lnTo = ...
    moveTo = ...
    w = ...
    h = ...
    def add_close(self):
        """Return a newly created `a:close`"""
        ...
    
    def add_lnTo(self, x, y):
        """Return a newly created `a:lnTo` """
        ...
    
    def add_moveTo(self, x, y):
        """Return a newly created `a:moveTo"""
        ...
    


class CT_Path2DClose(BaseOxmlElement):
    """`a:close` custom element class."""
    ...


class CT_Path2DLineTo(BaseOxmlElement):
    """`a:lnTo` custom element class."""
    pt = ...


class CT_Path2DList(BaseOxmlElement):
    """`a:pathLst` custom element class"""
    path = ...
    def add_path(self, w, h):
        """Return a newly created `a:path` """
        ...
    


class CT_Path2DMoveTo(BaseOxmlElement):
    """`a:moveTo` custom element class."""
    pt = ...


class CT_PresetGeometry2D(BaseOxmlElement):
    """
    <a:prstGeom> custom element"""
    avLst = ...
    prst = ...
    @property
    def gd_lst(self): # -> list[Unknown]:
        """
        Sequence containing the"""
        ...
    
    def rewrite_guides(self, guides): # -> None:
        """
        Remove any ``<a:gd>`` e"""
        ...
    


class CT_Shape(BaseShapeElement):
    """
    ``<p:sp>`` custom element c"""
    nvSpPr = ...
    spPr = ...
    txBody = ...
    def add_path(self, w, h):
        """Reference to `a:custGeom` descen"""
        ...
    
    def get_or_add_ln(self):
        """
        Return the <a:ln> grand"""
        ...
    
    @property
    def has_custom_geometry(self): # -> bool:
        """True if this shape has custom ge"""
        ...
    
    @property
    def is_autoshape(self): # -> bool:
        """
        True if this shape is a"""
        ...
    
    @property
    def is_textbox(self): # -> bool:
        """
        True if this shape is a"""
        ...
    
    @property
    def ln(self):
        """
        ``<a:ln>`` grand-child """
        ...
    
    @staticmethod
    def new_autoshape_sp(id_, name, prst, left, top, width, height): # -> Any:
        """
        Return a new ``<p:sp>``"""
        ...
    
    @staticmethod
    def new_freeform_sp(shape_id, name, x, y, cx, cy): # -> Any:
        """Return new `p:sp` element tree c"""
        ...
    
    @staticmethod
    def new_placeholder_sp(id_, name, ph_type, orient, sz, idx): # -> Any:
        """
        Return a new ``<p:sp>``"""
        ...
    
    @staticmethod
    def new_textbox_sp(id_, name, left, top, width, height): # -> Any:
        """
        Return a new ``<p:sp>``"""
        ...
    
    @property
    def prst(self): # -> None:
        """
        Value of ``prst`` attri"""
        ...
    
    @property
    def prstGeom(self):
        """
        Reference to ``<a:prstG"""
        ...
    


class CT_ShapeNonVisual(BaseShapeElement):
    """
    ``<p:nvSpPr>`` custom eleme"""
    cNvPr = ...
    cNvSpPr = ...
    nvPr = ...


