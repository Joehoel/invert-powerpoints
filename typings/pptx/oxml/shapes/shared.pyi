"""
This type stub file was generated by pyright.
"""

from pptx.oxml.xmlchemy import BaseOxmlElement

"""Common shape-related oxml object"""
class BaseShapeElement(BaseOxmlElement):
    """
    Provides common behavior fo"""
    @property
    def cx(self): # -> Any | None:
        ...
    
    @cx.setter
    def cx(self, value): # -> None:
        ...
    
    @property
    def cy(self): # -> Any | None:
        ...
    
    @cy.setter
    def cy(self, value): # -> None:
        ...
    
    @property
    def flipH(self): # -> bool:
        ...
    
    @flipH.setter
    def flipH(self, value): # -> None:
        ...
    
    @property
    def flipV(self): # -> bool:
        ...
    
    @flipV.setter
    def flipV(self, value): # -> None:
        ...
    
    def get_or_add_xfrm(self):
        """
        Return the ``<a:xfrm>``"""
        ...
    
    @property
    def has_ph_elm(self): # -> bool:
        """
        True if this shape elem"""
        ...
    
    @property
    def ph(self): # -> None:
        """
        The ``<p:ph>`` descenda"""
        ...
    
    @property
    def ph_idx(self):
        """
        Integer value of placeh"""
        ...
    
    @property
    def ph_orient(self):
        """
        Placeholder orientation"""
        ...
    
    @property
    def ph_sz(self):
        """
        Placeholder size, e.g. """
        ...
    
    @property
    def ph_type(self):
        """
        Placeholder type, e.g. """
        ...
    
    @property
    def rot(self): # -> float:
        """
        Float representing degr"""
        ...
    
    @rot.setter
    def rot(self, value): # -> None:
        ...
    
    @property
    def shape_id(self):
        """
        Integer id of this shap"""
        ...
    
    @property
    def shape_name(self):
        """
        Name of this shape
    """
        ...
    
    @property
    def txBody(self):
        """
        Child ``<p:txBody>`` el"""
        ...
    
    @property
    def x(self): # -> Any | None:
        ...
    
    @x.setter
    def x(self, value): # -> None:
        ...
    
    @property
    def xfrm(self):
        """
        The ``<a:xfrm>`` grandc"""
        ...
    
    @property
    def y(self): # -> Any | None:
        ...
    
    @y.setter
    def y(self, value): # -> None:
        ...
    


class CT_ApplicationNonVisualDrawingProps(BaseOxmlElement):
    """
    ``<p:nvPr>`` element
    """
    ph = ...


class CT_LineProperties(BaseOxmlElement):
    """Custom element class for <a:ln> """
    _tag_seq = ...
    eg_lineFillProperties = ...
    prstDash = ...
    custDash = ...
    w = ...
    @property
    def eg_fillProperties(self): # -> ZeroOrOneChoice:
        """
        Required to fulfill the"""
        ...
    
    @property
    def prstDash_val(self): # -> None:
        """Return value of `val` attribute """
        ...
    
    @prstDash_val.setter
    def prstDash_val(self, val): # -> None:
        ...
    


class CT_NonVisualDrawingProps(BaseOxmlElement):
    """
    ``<p:cNvPr>`` custom elemen"""
    _tag_seq = ...
    hlinkClick = ...
    hlinkHover = ...
    id = ...
    name = ...


class CT_Placeholder(BaseOxmlElement):
    """
    ``<p:ph>`` custom element c"""
    type = ...
    orient = ...
    sz = ...
    idx = ...


class CT_Point2D(BaseOxmlElement):
    """
    Custom element class for <a"""
    x = ...
    y = ...


class CT_PositiveSize2D(BaseOxmlElement):
    """
    Custom element class for <a"""
    cx = ...
    cy = ...


class CT_ShapeProperties(BaseOxmlElement):
    """Custom element class for `p:spPr"""
    _tag_seq = ...
    xfrm = ...
    custGeom = ...
    prstGeom = ...
    eg_fillProperties = ...
    ln = ...
    effectLst = ...
    @property
    def cx(self): # -> Length | None:
        """
        Shape width as an insta"""
        ...
    
    @property
    def cy(self): # -> Length | None:
        """
        Shape height as an inst"""
        ...
    
    @property
    def x(self): # -> Length | None:
        """
        The offset of the left """
        ...
    
    @property
    def y(self): # -> Length | None:
        """
        The offset of the top o"""
        ...
    


class CT_Transform2D(BaseOxmlElement):
    """`a:xfrm` custom element class.

"""
    _tag_seq = ...
    off = ...
    ext = ...
    chOff = ...
    chExt = ...
    rot = ...
    flipH = ...
    flipV = ...
    @property
    def x(self): # -> None:
        ...
    
    @x.setter
    def x(self, value): # -> None:
        ...
    
    @property
    def y(self): # -> None:
        ...
    
    @y.setter
    def y(self, value): # -> None:
        ...
    
    @property
    def cx(self): # -> None:
        ...
    
    @cx.setter
    def cx(self, value): # -> None:
        ...
    
    @property
    def cy(self): # -> None:
        ...
    
    @cy.setter
    def cy(self, value): # -> None:
        ...
    


