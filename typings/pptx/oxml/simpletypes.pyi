"""
This type stub file was generated by pyright.
"""

"""Simple-type classes.

A "simple-"""
class BaseSimpleType:
    @classmethod
    def from_xml(cls, str_value):
        ...
    
    @classmethod
    def to_xml(cls, value):
        ...
    
    @classmethod
    def validate_float(cls, value): # -> None:
        """
        Note that int values ar"""
        ...
    
    @classmethod
    def validate_int(cls, value): # -> None:
        ...
    
    @classmethod
    def validate_float_in_range(cls, value, min_inclusive, max_inclusive): # -> None:
        ...
    
    @classmethod
    def validate_int_in_range(cls, value, min_inclusive, max_inclusive): # -> None:
        ...
    
    @classmethod
    def validate_string(cls, value): # -> str:
        ...
    


class BaseFloatType(BaseSimpleType):
    @classmethod
    def convert_from_xml(cls, str_value): # -> float:
        ...
    
    @classmethod
    def convert_to_xml(cls, value): # -> str:
        ...
    
    @classmethod
    def validate(cls, value): # -> None:
        ...
    


class BaseIntType(BaseSimpleType):
    @classmethod
    def convert_from_percent_literal(cls, str_value): # -> int:
        ...
    
    @classmethod
    def convert_from_xml(cls, str_value): # -> int:
        ...
    
    @classmethod
    def convert_to_xml(cls, value): # -> str:
        ...
    
    @classmethod
    def validate(cls, value): # -> None:
        ...
    


class BaseStringType(BaseSimpleType):
    @classmethod
    def convert_from_xml(cls, str_value):
        ...
    
    @classmethod
    def convert_to_xml(cls, value):
        ...
    
    @classmethod
    def validate(cls, value): # -> None:
        ...
    


class BaseStringEnumerationType(BaseStringType):
    @classmethod
    def validate(cls, value): # -> None:
        ...
    


class XsdAnyUri(BaseStringType):
    """
    There's a regular expressio"""
    ...


class XsdBoolean(BaseSimpleType):
    @classmethod
    def convert_from_xml(cls, str_value): # -> bool:
        ...
    
    @classmethod
    def convert_to_xml(cls, value): # -> str:
        ...
    
    @classmethod
    def validate(cls, value): # -> None:
        ...
    


class XsdDouble(BaseFloatType):
    ...


class XsdId(BaseStringType):
    """
    String that must begin with"""
    ...


class XsdInt(BaseIntType):
    @classmethod
    def validate(cls, value): # -> None:
        ...
    


class XsdLong(BaseIntType):
    @classmethod
    def validate(cls, value): # -> None:
        ...
    


class XsdString(BaseStringType):
    ...


class XsdStringEnumeration(BaseStringEnumerationType):
    """
    Set of enumerated xsd:strin"""
    ...


class XsdToken(BaseStringType):
    """
    xsd:string with whitespace """
    ...


class XsdTokenEnumeration(BaseStringEnumerationType):
    """
    xsd:string with whitespace """
    ...


class XsdUnsignedByte(BaseIntType):
    @classmethod
    def validate(cls, value): # -> None:
        ...
    


class XsdUnsignedInt(BaseIntType):
    @classmethod
    def validate(cls, value): # -> None:
        ...
    


class XsdUnsignedShort(BaseIntType):
    @classmethod
    def validate(cls, value): # -> None:
        ...
    


class ST_Angle(XsdInt):
    """
    Valid values for `rot` attr"""
    DEGREE_INCREMENTS = ...
    THREE_SIXTY = ...
    @classmethod
    def convert_from_xml(cls, str_value): # -> float:
        ...
    
    @classmethod
    def convert_to_xml(cls, value): # -> str:
        """
        Convert signed angle fl"""
        ...
    
    @classmethod
    def validate(cls, value): # -> None:
        ...
    


class ST_AxisUnit(XsdDouble):
    """
    Valid values for val attrib"""
    @classmethod
    def validate(cls, value): # -> None:
        ...
    


class ST_BarDir(XsdStringEnumeration):
    """
    Valid values for <c:barDir """
    BAR = ...
    COL = ...
    _members = ...


class ST_BubbleScale(BaseIntType):
    """
    String value is an integer """
    @classmethod
    def convert_from_xml(cls, str_value): # -> int:
        ...
    
    @classmethod
    def validate(cls, value): # -> None:
        ...
    


class ST_ContentType(XsdString):
    """
    Has a pretty wicked regular"""
    ...


class ST_Coordinate(BaseSimpleType):
    @classmethod
    def convert_from_xml(cls, str_value): # -> Length:
        ...
    
    @classmethod
    def convert_to_xml(cls, value): # -> str:
        ...
    
    @classmethod
    def validate(cls, value): # -> None:
        ...
    


class ST_Coordinate32(BaseSimpleType):
    """
    xsd:union of ST_Coordinate3"""
    @classmethod
    def convert_from_xml(cls, str_value): # -> Length:
        ...
    
    @classmethod
    def convert_to_xml(cls, value): # -> str:
        ...
    
    @classmethod
    def validate(cls, value): # -> None:
        ...
    


class ST_Coordinate32Unqualified(XsdInt):
    @classmethod
    def convert_from_xml(cls, str_value): # -> Length:
        ...
    


class ST_CoordinateUnqualified(XsdLong):
    @classmethod
    def validate(cls, value): # -> None:
        ...
    


class ST_Direction(XsdTokenEnumeration):
    """
    Valid values for <p:ph orie"""
    HORZ = ...
    VERT = ...
    _members = ...


class ST_DrawingElementId(XsdUnsignedInt):
    ...


class ST_Extension(XsdString):
    """
    Has a regular expression it"""
    ...


class ST_GapAmount(BaseIntType):
    """
    String value is an integer """
    @classmethod
    def convert_from_xml(cls, str_value): # -> int:
        ...
    
    @classmethod
    def validate(cls, value): # -> None:
        ...
    


class ST_Grouping(XsdStringEnumeration):
    """
    Valid values for <c:groupin"""
    CLUSTERED = ...
    PERCENT_STACKED = ...
    STACKED = ...
    STANDARD = ...
    _members = ...


class ST_HexColorRGB(BaseStringType):
    @classmethod
    def convert_to_xml(cls, value):
        """
        Keep alpha characters a"""
        ...
    
    @classmethod
    def validate(cls, value): # -> None:
        ...
    


class ST_LayoutMode(XsdStringEnumeration):
    """
    Valid values for `val` attr"""
    EDGE = ...
    FACTOR = ...
    _members = ...


class ST_LblOffset(XsdUnsignedShort):
    """
    Unsigned integer value betw"""
    @classmethod
    def convert_from_xml(cls, str_value): # -> int:
        ...
    
    @classmethod
    def validate(cls, value): # -> None:
        ...
    


class ST_LineWidth(XsdInt):
    @classmethod
    def convert_from_xml(cls, str_value): # -> Length:
        ...
    
    @classmethod
    def validate(cls, value): # -> None:
        ...
    


class ST_MarkerSize(XsdUnsignedByte):
    @classmethod
    def validate(cls, value): # -> None:
        ...
    


class ST_Orientation(XsdStringEnumeration):
    """Valid values for `val` attribute"""
    MAX_MIN = ...
    MIN_MAX = ...
    _members = ...


class ST_Overlap(BaseIntType):
    """
    String value is an integer """
    @classmethod
    def convert_from_xml(cls, str_value): # -> int:
        ...
    
    @classmethod
    def validate(cls, value): # -> None:
        ...
    


class ST_Percentage(BaseIntType):
    """Percentage value like 42000 or '"""
    @classmethod
    def convert_from_xml(cls, str_value): # -> float:
        ...
    
    @classmethod
    def convert_to_xml(cls, value): # -> str:
        ...
    
    @classmethod
    def validate(cls, value): # -> None:
        ...
    


class ST_PlaceholderSize(XsdTokenEnumeration):
    """
    Valid values for <p:ph> sz """
    FULL = ...
    HALF = ...
    QUARTER = ...
    _members = ...


class ST_PositiveCoordinate(XsdLong):
    @classmethod
    def convert_from_xml(cls, str_value): # -> Length:
        ...
    
    @classmethod
    def validate(cls, value): # -> None:
        ...
    


class ST_PositiveFixedAngle(ST_Angle):
    """Valid values for `a:lin@ang`.

 """
    @classmethod
    def convert_to_xml(cls, degrees): # -> str:
        """Convert signed angle float like """
        ...
    


class ST_PositiveFixedPercentage(ST_Percentage):
    """Percentage value between 0 and 1"""
    @classmethod
    def validate(cls, value): # -> None:
        ...
    


class ST_RelationshipId(XsdString):
    ...


class ST_SlideId(XsdUnsignedInt):
    @classmethod
    def validate(cls, value): # -> None:
        ...
    


class ST_SlideSizeCoordinate(BaseIntType):
    @classmethod
    def convert_from_xml(cls, str_value): # -> Length:
        ...
    
    @classmethod
    def validate(cls, value): # -> None:
        ...
    


class ST_Style(XsdUnsignedByte):
    @classmethod
    def validate(cls, value): # -> None:
        ...
    


class ST_TargetMode(XsdString):
    """
    The valid values for the ``"""
    @classmethod
    def validate(cls, value): # -> None:
        ...
    


class ST_TextFontScalePercentOrPercentString(BaseFloatType):
    """
    Valid values for the `fontS"""
    @classmethod
    def convert_from_xml(cls, str_value): # -> float:
        ...
    
    @classmethod
    def convert_to_xml(cls, value): # -> str:
        ...
    
    @classmethod
    def validate(cls, value): # -> None:
        ...
    


class ST_TextFontSize(BaseIntType):
    @classmethod
    def validate(cls, value): # -> None:
        ...
    


class ST_TextIndentLevelType(BaseIntType):
    @classmethod
    def validate(cls, value): # -> None:
        ...
    


class ST_TextSpacingPercentOrPercentString(BaseFloatType):
    @classmethod
    def convert_from_xml(cls, str_value): # -> float:
        ...
    
    @classmethod
    def convert_to_xml(cls, value): # -> str:
        """
        1.75 -> '175000'
      """
        ...
    
    @classmethod
    def validate(cls, value): # -> None:
        ...
    


class ST_TextSpacingPoint(BaseIntType):
    @classmethod
    def convert_from_xml(cls, str_value): # -> Length:
        """
        Reads string integer ce"""
        ...
    
    @classmethod
    def convert_to_xml(cls, value): # -> str:
        ...
    
    @classmethod
    def validate(cls, value): # -> None:
        ...
    


class ST_TextTypeface(XsdString):
    ...


class ST_TextWrappingType(XsdTokenEnumeration):
    """
    Valid values for <a:bodyPr """
    NONE = ...
    SQUARE = ...
    _members = ...


class ST_UniversalMeasure(BaseSimpleType):
    @classmethod
    def convert_from_xml(cls, str_value): # -> Length:
        ...
    


