"""
This type stub file was generated by pyright.
"""

from ..util import lazyproperty

"""
Plot-related objects. A plot is"""
class _BasePlot:
    """
    A distinct plot that appear"""
    def __init__(self, xChart, chart) -> None:
        ...
    
    @lazyproperty
    def categories(self): # -> Categories:
        """
        Returns a |category.Cat"""
        ...
    
    @property
    def chart(self): # -> Unknown:
        """
        The |Chart| object cont"""
        ...
    
    @property
    def data_labels(self): # -> DataLabels:
        """
        |DataLabels| instance p"""
        ...
    
    @property
    def has_data_labels(self): # -> bool:
        """
        Read/write boolean, |Tr"""
        ...
    
    @has_data_labels.setter
    def has_data_labels(self, value): # -> None:
        """
        Add, remove, or leave a"""
        ...
    
    @lazyproperty
    def series(self): # -> SeriesCollection:
        """
        A sequence of |Series| """
        ...
    
    @property
    def vary_by_categories(self): # -> Literal[True]:
        """
        Read/write boolean valu"""
        ...
    
    @vary_by_categories.setter
    def vary_by_categories(self, value): # -> None:
        ...
    


class AreaPlot(_BasePlot):
    """
    An area plot.
    """
    ...


class Area3DPlot(_BasePlot):
    """
    A 3-dimensional area plot.
"""
    ...


class BarPlot(_BasePlot):
    """
    A bar chart-style plot.
   """
    @property
    def gap_width(self): # -> Literal[150]:
        """
        Width of gap between ba"""
        ...
    
    @gap_width.setter
    def gap_width(self, value): # -> None:
        ...
    
    @property
    def overlap(self): # -> Literal[0]:
        """
        Read/write int value in"""
        ...
    
    @overlap.setter
    def overlap(self, value): # -> None:
        """
        Set the value of the ``"""
        ...
    


class BubblePlot(_BasePlot):
    """
    A bubble chart plot.
    """
    @property
    def bubble_scale(self): # -> Literal[100]:
        """
        An integer between 0 an"""
        ...
    
    @bubble_scale.setter
    def bubble_scale(self, value): # -> None:
        ...
    


class DoughnutPlot(_BasePlot):
    """
    An doughnut plot.
    """
    ...


class LinePlot(_BasePlot):
    """
    A line chart-style plot.
  """
    ...


class PiePlot(_BasePlot):
    """
    A pie chart-style plot.
   """
    ...


class RadarPlot(_BasePlot):
    """
    A radar-style plot.
    """
    ...


class XyPlot(_BasePlot):
    """
    An XY (scatter) plot.
    """
    ...


def PlotFactory(xChart, chart):
    """
    Return an instance of the a"""
    ...

class PlotTypeInspector:
    """
    "One-shot" service object t"""
    @classmethod
    def chart_type(cls, plot):
        """
        Return the member of :r"""
        ...
    


