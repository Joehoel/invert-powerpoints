"""
This type stub file was generated by pyright.
"""

from pptx.compat import Sequence
from pptx.util import lazyproperty

"""Series-related objects."""
class _BaseSeries:
    """
    Base class for |BarSeries| """
    def __init__(self, ser) -> None:
        ...
    
    @lazyproperty
    def format(self): # -> ChartFormat:
        """
        The |ChartFormat| insta"""
        ...
    
    @property
    def index(self):
        """
        The zero-based integer """
        ...
    
    @property
    def name(self): # -> Literal['']:
        """
        The string label given """
        ...
    


class _BaseCategorySeries(_BaseSeries):
    """Base class for |BarSeries| and o"""
    @lazyproperty
    def data_labels(self): # -> DataLabels:
        """|DataLabels| object controlling """
        ...
    
    @lazyproperty
    def points(self): # -> CategoryPoints:
        """
        The |CategoryPoints| ob"""
        ...
    
    @property
    def values(self): # -> tuple[Unknown, ...]:
        """
        Read-only. A sequence c"""
        ...
    


class _MarkerMixin:
    """
    Mixin class providing `.mar"""
    @lazyproperty
    def marker(self): # -> Marker:
        """
        The |Marker| instance f"""
        ...
    


class AreaSeries(_BaseCategorySeries):
    """
    A data point series belongi"""
    ...


class BarSeries(_BaseCategorySeries):
    """A data point series belonging to"""
    @property
    def invert_if_negative(self): # -> Literal[True]:
        """
        |True| if a point havin"""
        ...
    
    @invert_if_negative.setter
    def invert_if_negative(self, value): # -> None:
        ...
    


class LineSeries(_BaseCategorySeries, _MarkerMixin):
    """
    A data point series belongi"""
    @property
    def smooth(self): # -> Literal[True]:
        """
        Read/write boolean spec"""
        ...
    
    @smooth.setter
    def smooth(self, value): # -> None:
        ...
    


class PieSeries(_BaseCategorySeries):
    """
    A data point series belongi"""
    ...


class RadarSeries(_BaseCategorySeries, _MarkerMixin):
    """
    A data point series belongi"""
    ...


class XySeries(_BaseSeries, _MarkerMixin):
    """
    A data point series belongi"""
    def iter_values(self): # -> Generator[Unknown, None, None]:
        """
        Generate each float Y v"""
        ...
    
    @lazyproperty
    def points(self): # -> XyPoints:
        """
        The |XyPoints| object p"""
        ...
    
    @property
    def values(self): # -> tuple[Unknown, ...]:
        """
        Read-only. A sequence c"""
        ...
    


class BubbleSeries(XySeries):
    """
    A data point series belongi"""
    @lazyproperty
    def points(self): # -> BubblePoints:
        """
        The |BubblePoints| obje"""
        ...
    


class SeriesCollection(Sequence):
    """
    A sequence of |Series| obje"""
    def __init__(self, parent_elm) -> None:
        ...
    
    def __getitem__(self, index): # -> AreaSeries | BarSeries | BubbleSeries | PieSeries | LineSeries | RadarSeries | XySeries:
        ...
    
    def __len__(self): # -> int:
        ...
    


