"""
This type stub file was generated by pyright.
"""

from pptx.shared import ElementProxy
from pptx.util import lazyproperty

"""Axis-related chart objects."""
class _BaseAxis:
    """Base class for chart axis object"""
    def __init__(self, xAx) -> None:
        ...
    
    @property
    def axis_title(self): # -> AxisTitle:
        """An |AxisTitle| object providing """
        ...
    
    @lazyproperty
    def format(self): # -> ChartFormat:
        """
        The |ChartFormat| objec"""
        ...
    
    @property
    def has_major_gridlines(self): # -> bool:
        """
        Read/write boolean valu"""
        ...
    
    @has_major_gridlines.setter
    def has_major_gridlines(self, value): # -> None:
        ...
    
    @property
    def has_minor_gridlines(self): # -> bool:
        """
        Read/write boolean valu"""
        ...
    
    @has_minor_gridlines.setter
    def has_minor_gridlines(self, value): # -> None:
        ...
    
    @property
    def has_title(self): # -> bool:
        """Read/write boolean specifying wh"""
        ...
    
    @has_title.setter
    def has_title(self, value): # -> None:
        ...
    
    @lazyproperty
    def major_gridlines(self): # -> MajorGridlines:
        """
        The |MajorGridlines| ob"""
        ...
    
    @property
    def major_tick_mark(self):
        """
        Read/write :ref:`XlTick"""
        ...
    
    @major_tick_mark.setter
    def major_tick_mark(self, value): # -> None:
        ...
    
    @property
    def maximum_scale(self):
        """
        Read/write float value """
        ...
    
    @maximum_scale.setter
    def maximum_scale(self, value): # -> None:
        ...
    
    @property
    def minimum_scale(self):
        """
        Read/write float value """
        ...
    
    @minimum_scale.setter
    def minimum_scale(self, value): # -> None:
        ...
    
    @property
    def minor_tick_mark(self):
        """
        Read/write :ref:`XlTick"""
        ...
    
    @minor_tick_mark.setter
    def minor_tick_mark(self, value): # -> None:
        ...
    
    @property
    def reverse_order(self):
        """Read/write bool value specifying"""
        ...
    
    @reverse_order.setter
    def reverse_order(self, value): # -> None:
        ...
    
    @lazyproperty
    def tick_labels(self): # -> TickLabels:
        """
        The |TickLabels| instan"""
        ...
    
    @property
    def tick_label_position(self):
        """
        Read/write :ref:`XlTick"""
        ...
    
    @tick_label_position.setter
    def tick_label_position(self, value): # -> None:
        ...
    
    @property
    def visible(self): # -> bool:
        """
        Read/write. |True| if a"""
        ...
    
    @visible.setter
    def visible(self, value): # -> None:
        ...
    


class AxisTitle(ElementProxy):
    """Provides properties for manipula"""
    def __init__(self, title) -> None:
        ...
    
    @lazyproperty
    def format(self): # -> ChartFormat:
        """|ChartFormat| object providing a"""
        ...
    
    @property
    def has_text_frame(self): # -> bool:
        """Read/write Boolean specifying pr"""
        ...
    
    @has_text_frame.setter
    def has_text_frame(self, value): # -> None:
        ...
    
    @property
    def text_frame(self): # -> TextFrame:
        """|TextFrame| instance for this ax"""
        ...
    


class CategoryAxis(_BaseAxis):
    """A category axis of a chart."""
    @property
    def category_type(self):
        """
        A member of :ref:`XlCat"""
        ...
    


class DateAxis(_BaseAxis):
    """A category axis with dates as it"""
    @property
    def category_type(self):
        """
        A member of :ref:`XlCat"""
        ...
    


class MajorGridlines(ElementProxy):
    """Provides access to the propertie"""
    def __init__(self, xAx) -> None:
        ...
    
    @lazyproperty
    def format(self): # -> ChartFormat:
        """
        The |ChartFormat| objec"""
        ...
    


class TickLabels:
    """A service class providing access"""
    def __init__(self, xAx_elm) -> None:
        ...
    
    @lazyproperty
    def font(self): # -> Font:
        """
        The |Font| object that """
        ...
    
    @property
    def number_format(self): # -> Literal['General']:
        """
        Read/write string (e.g."""
        ...
    
    @number_format.setter
    def number_format(self, value): # -> None:
        ...
    
    @property
    def number_format_is_linked(self): # -> bool:
        """
        Read/write boolean spec"""
        ...
    
    @number_format_is_linked.setter
    def number_format_is_linked(self, value): # -> None:
        ...
    
    @property
    def offset(self): # -> Literal[100]:
        """
        Read/write int value in"""
        ...
    
    @offset.setter
    def offset(self, value): # -> None:
        ...
    


class ValueAxis(_BaseAxis):
    """An axis having continuous (as op"""
    @property
    def crosses(self):
        """
        Member of :ref:`XlAxisC"""
        ...
    
    @crosses.setter
    def crosses(self, value): # -> None:
        ...
    
    @property
    def crosses_at(self): # -> None:
        """
        Numeric value on this a"""
        ...
    
    @crosses_at.setter
    def crosses_at(self, value): # -> None:
        ...
    
    @property
    def major_unit(self): # -> None:
        """
        The float number of uni"""
        ...
    
    @major_unit.setter
    def major_unit(self, value): # -> None:
        ...
    
    @property
    def minor_unit(self): # -> None:
        """
        The float number of uni"""
        ...
    
    @minor_unit.setter
    def minor_unit(self, value): # -> None:
        ...
    


