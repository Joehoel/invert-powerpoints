"""
This type stub file was generated by pyright.
"""

from pptx.compat import Mapping
from pptx.util import lazyproperty

"""Fundamental Open Packaging Conve"""
class _RelatableMixin:
    """Provide relationship methods req"""
    def part_related_by(self, reltype):
        """Return (single) part having rela"""
        ...
    
    def relate_to(self, target, reltype, is_external=...):
        """Return rId key of relationship o"""
        ...
    
    def related_part(self, rId):
        """Return related |Part| subtype id"""
        ...
    
    def target_ref(self, rId):
        """Return URL contained in target r"""
        ...
    


class OpcPackage(_RelatableMixin):
    """Main API class for |python-opc|."""
    def __init__(self, pkg_file) -> None:
        ...
    
    @classmethod
    def open(cls, pkg_file): # -> Self@OpcPackage:
        """Return an |OpcPackage| instance """
        ...
    
    def drop_rel(self, rId): # -> None:
        """Remove relationship identified b"""
        ...
    
    def iter_parts(self): # -> Generator[Unknown, None, None]:
        """Generate exactly one reference t"""
        ...
    
    def iter_rels(self): # -> Generator[Unknown, None, None]:
        """Generate exactly one reference t"""
        ...
    
    @property
    def main_document_part(self):
        """Return |Part| subtype serving as"""
        ...
    
    def next_partname(self, tmpl): # -> PackURI:
        """Return |PackURI| next available """
        ...
    
    def save(self, pkg_file): # -> None:
        """Save this package to `pkg_file`."""
        ...
    


class _PackageLoader:
    """Function-object that loads a pac"""
    def __init__(self, pkg_file, package) -> None:
        ...
    
    @classmethod
    def load(cls, pkg_file, package): # -> tuple[Unknown, Unknown]:
        """Return (pkg_xml_rels, parts) pai"""
        ...
    


class Part(_RelatableMixin):
    """Base class for package parts.

 """
    def __init__(self, partname, content_type, package, blob=...) -> None:
        ...
    
    @classmethod
    def load(cls, partname, content_type, package, blob): # -> Self@Part:
        """Return `cls` instance loaded fro"""
        ...
    
    @property
    def blob(self): # -> Unknown:
        """Contents of this package part as"""
        ...
    
    @blob.setter
    def blob(self, bytes_): # -> None:
        """Note that not all subclasses use"""
        ...
    
    @lazyproperty
    def content_type(self): # -> Unknown:
        """Content-type (MIME-type) of this"""
        ...
    
    def drop_rel(self, rId): # -> None:
        """Remove relationship identified b"""
        ...
    
    def load_rels_from_xml(self, xml_rels, parts): # -> None:
        """load _Relationships for this par"""
        ...
    
    @lazyproperty
    def package(self): # -> Unknown:
        """|OpcPackage| instance this part """
        ...
    
    @property
    def partname(self): # -> Unknown | PackURI:
        """|PackURI| partname for this part"""
        ...
    
    @partname.setter
    def partname(self, partname): # -> None:
        ...
    
    @lazyproperty
    def rels(self):
        """|Relationships| collection of re"""
        ...
    


class XmlPart(Part):
    """Base class for package parts con"""
    def __init__(self, partname, content_type, package, element) -> None:
        ...
    
    @classmethod
    def load(cls, partname, content_type, package, blob): # -> Self@XmlPart:
        """Return instance of `cls` loaded """
        ...
    
    @property
    def blob(self):
        """bytes XML serialization of this """
        ...
    
    @property
    def part(self): # -> Self@XmlPart:
        """This part.

        This is part"""
        ...
    


class PartFactory:
    """Constructs a registered subtype """
    part_type_for = ...
    def __new__(cls, partname, content_type, package, blob): # -> Part:
        ...
    


class _ContentTypeMap:
    """Value type providing dict semant"""
    def __init__(self, overrides, defaults) -> None:
        ...
    
    def __getitem__(self, partname):
        """Return content-type (MIME-type) """
        ...
    
    @classmethod
    def from_xml(cls, content_types_xml): # -> Self@_ContentTypeMap:
        """Return |_ContentTypeMap| instanc"""
        ...
    


class _Relationships(Mapping):
    """Collection of |_Relationship| in"""
    def __init__(self, base_uri) -> None:
        ...
    
    def __contains__(self, rId): # -> bool:
        """Implement 'in' operation, like `"""
        ...
    
    def __getitem__(self, rId):
        """Implement relationship lookup by"""
        ...
    
    def __iter__(self): # -> Generator[Unknown, None, None]:
        """Implement iteration of relations"""
        ...
    
    def __len__(self): # -> int:
        """Return count of relationships in"""
        ...
    
    def get_or_add(self, reltype, target_part): # -> str | None:
        """Return str rId of `reltype` to `"""
        ...
    
    def get_or_add_ext_rel(self, reltype, target_ref): # -> str | None:
        """Return str rId of external relat"""
        ...
    
    def load_from_xml(self, base_uri, xml_rels, parts): # -> None:
        """Replace any relationships in thi"""
        ...
    
    def part_with_reltype(self, reltype):
        """Return target part of relationsh"""
        ...
    
    def pop(self, rId):
        """Return |Relationship| identified"""
        ...
    
    @property
    def xml(self): # -> Any:
        """bytes XML serialization of this """
        ...
    


class _Relationship:
    """Value object describing link fro"""
    def __init__(self, base_uri, rId, reltype, target_mode, target) -> None:
        ...
    
    @classmethod
    def from_xml(cls, base_uri, rel, parts): # -> Self@_Relationship:
        """Return |_Relationship| object ba"""
        ...
    
    @lazyproperty
    def is_external(self):
        """True if target_mode is `RTM.EXTE"""
        ...
    
    @lazyproperty
    def reltype(self): # -> Unknown:
        """Member of RELATIONSHIP_TYPE desc"""
        ...
    
    @lazyproperty
    def rId(self): # -> Unknown:
        """str relationship-id, like 'rId9'"""
        ...
    
    @lazyproperty
    def target_part(self): # -> Unknown:
        """|Part| or subtype referred to by"""
        ...
    
    @lazyproperty
    def target_partname(self):
        """|PackURI| instance containing pa"""
        ...
    
    @lazyproperty
    def target_ref(self): # -> Unknown:
        """str reference to relationship ta"""
        ...
    


