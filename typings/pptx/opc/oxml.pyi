"""
This type stub file was generated by pyright.
"""

from ..oxml.xmlchemy import BaseOxmlElement

"""OPC-local oxml module to handle """
nsmap = ...
def oxml_tostring(elm, encoding=..., pretty_print=..., standalone=...):
    ...

def serialize_part_xml(part_elm):
    ...

class CT_Default(BaseOxmlElement):
    """
    ``<Default>`` element, spec"""
    extension = ...
    contentType = ...


class CT_Override(BaseOxmlElement):
    """
    ``<Override>`` element, spe"""
    partName = ...
    contentType = ...


class CT_Relationship(BaseOxmlElement):
    """
    ``<Relationship>`` element,"""
    rId = ...
    reltype = ...
    target_ref = ...
    targetMode = ...
    @classmethod
    def new(cls, rId, reltype, target, target_mode=...): # -> Any:
        """
        Return a new ``<Relatio"""
        ...
    


class CT_Relationships(BaseOxmlElement):
    """`<Relationships>` element, the r"""
    relationship = ...
    def add_rel(self, rId, reltype, target, is_external=...): # -> None:
        """
        Add a child ``<Relation"""
        ...
    
    @classmethod
    def new(cls): # -> Any:
        """Return a new ``<Relationships>``"""
        ...
    
    @property
    def xml(self):
        """
        Return XML string for t"""
        ...
    


class CT_Types(BaseOxmlElement):
    """
    ``<Types>`` element, the co"""
    default = ...
    override = ...
    def add_default(self, ext, content_type):
        """
        Add a child ``<Default>"""
        ...
    
    def add_override(self, partname, content_type):
        """
        Add a child ``<Override"""
        ...
    
    @classmethod
    def new(cls): # -> Any:
        """
        Return a new ``<Types>`"""
        ...
    


