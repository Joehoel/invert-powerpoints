"""
This type stub file was generated by pyright.
"""

from pptx.compat import Container

"""API for reading/writing serializ"""
class PackageReader(Container):
    """Provides access to package-parts"""
    def __init__(self, pkg_file) -> None:
        ...
    
    def __contains__(self, pack_uri): # -> bool:
        """Return True when part identified"""
        ...
    
    def __getitem__(self, pack_uri):
        """Return bytes for part correspond"""
        ...
    
    def rels_xml_for(self, partname): # -> None:
        """Return optional rels item XML fo"""
        ...
    


class PackageWriter:
    """Writes a zip-format OPC package """
    def __init__(self, pkg_file, pkg_rels, parts) -> None:
        ...
    
    @classmethod
    def write(cls, pkg_file, pkg_rels, parts): # -> None:
        """Write a physical package (.pptx """
        ...
    


class _PhysPkgReader(Container):
    """Base class for physical package """
    def __contains__(self, item):
        """Must be implemented by each subc"""
        ...
    
    @classmethod
    def factory(cls, pkg_file): # -> _ZipPkgReader | _DirPkgReader:
        """Return |_PhysPkgReader| subtype """
        ...
    


class _DirPkgReader(_PhysPkgReader):
    """Implements |PhysPkgReader| inter"""
    def __init__(self, path) -> None:
        ...
    
    def __contains__(self, pack_uri): # -> bool:
        """Return True when part identified"""
        ...
    
    def __getitem__(self, pack_uri): # -> bytes:
        """Return bytes of file correspondi"""
        ...
    


class _ZipPkgReader(_PhysPkgReader):
    """Implements |PhysPkgReader| inter"""
    def __init__(self, pkg_file) -> None:
        ...
    
    def __contains__(self, pack_uri): # -> bool:
        """Return True when part identified"""
        ...
    
    def __getitem__(self, pack_uri):
        """Return bytes for part correspond"""
        ...
    


class _PhysPkgWriter:
    """Base class for physical package """
    @classmethod
    def factory(cls, pkg_file): # -> _ZipPkgWriter:
        """Return |_PhysPkgWriter| subtype """
        ...
    


class _ZipPkgWriter(_PhysPkgWriter):
    """Implements |PhysPkgWriter| inter"""
    def __init__(self, pkg_file) -> None:
        ...
    
    def __enter__(self): # -> Self@_ZipPkgWriter:
        """Enable use as a context-manager."""
        ...
    
    def __exit__(self, exc_type, exc_value, exc_traceback): # -> None:
        """Close the zip archive on exit fr"""
        ...
    
    def write(self, pack_uri, blob): # -> None:
        """Write `blob` to zip package with"""
        ...
    


class _ContentTypesItem:
    """Composes content-types "part" (["""
    def __init__(self, parts) -> None:
        ...
    
    @classmethod
    def xml_for(cls, parts):
        """Return content-types XML mapping"""
        ...
    


