"""
This type stub file was generated by pyright.
"""

from pptx.compat import Sequence

"""Objects related to construction """
class FreeformBuilder(Sequence):
    """Allows a freeform shape to be sp"""
    def __init__(self, shapes, start_x, start_y, x_scale, y_scale) -> None:
        ...
    
    def __getitem__(self, idx):
        ...
    
    def __iter__(self):
        ...
    
    def __len__(self):
        ...
    
    @classmethod
    def new(cls, shapes, start_x, start_y, x_scale, y_scale): # -> Self@FreeformBuilder:
        """Return a new |FreeformBuilder| o"""
        ...
    
    def add_line_segments(self, vertices, close=...): # -> Self@FreeformBuilder:
        """Add a straight line segment to e"""
        ...
    
    def convert_to_shape(self, origin_x=..., origin_y=...):
        """Return new freeform shape positi"""
        ...
    
    def move_to(self, x, y): # -> Self@FreeformBuilder:
        """Move pen to (x, y) (local coordi"""
        ...
    
    @property
    def shape_offset_x(self): # -> Unknown:
        """Return x distance of shape origi"""
        ...
    
    @property
    def shape_offset_y(self): # -> Unknown:
        """Return y distance of shape origi"""
        ...
    


class _BaseDrawingOperation:
    """Base class for freeform drawing """
    def __init__(self, freeform_builder, x, y) -> None:
        ...
    
    def apply_operation_to(self, path):
        """Add the XML element(s) implement"""
        ...
    
    @property
    def x(self): # -> Unknown:
        """Return the horizontal (x) target"""
        ...
    
    @property
    def y(self): # -> Unknown:
        """Return the vertical (y) target l"""
        ...
    


class _Close:
    """Specifies adding a `<a:close/>` """
    @classmethod
    def new(cls): # -> Self@_Close:
        """Return a new _Close object."""
        ...
    
    def apply_operation_to(self, path):
        """Add `a:close` element to *path*."""
        ...
    


class _LineSegment(_BaseDrawingOperation):
    """Specifies a straight line segmen"""
    @classmethod
    def new(cls, freeform_builder, x, y): # -> Self@_LineSegment:
        """Return a new _LineSegment object"""
        ...
    
    def apply_operation_to(self, path):
        """Add `a:lnTo` element to *path* f"""
        ...
    


class _MoveTo(_BaseDrawingOperation):
    """Specifies a new pen position."""
    @classmethod
    def new(cls, freeform_builder, x, y): # -> Self@_MoveTo:
        """Return a new _MoveTo object for """
        ...
    
    def apply_operation_to(self, path):
        """Add `a:moveTo` element to *path*"""
        ...
    


