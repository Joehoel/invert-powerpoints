"""
This type stub file was generated by pyright.
"""

from pptx.shared import ParentedElementProxy

"""The shape tree, the structure th"""
class _BaseShapes(ParentedElementProxy):
    """
    Base class for a shape coll"""
    def __init__(self, spTree, parent) -> None:
        ...
    
    def __getitem__(self, idx): # -> Movie | Picture | Connector | GroupShape | Shape | GraphicFrame | BaseShape:
        """
        Return shape at *idx* i"""
        ...
    
    def __iter__(self): # -> Generator[Movie | Picture | Connector | GroupShape | Shape | GraphicFrame | BaseShape, None, None]:
        """
        Generate a reference to"""
        ...
    
    def __len__(self): # -> int:
        """
        Return count of shapes """
        ...
    
    def clone_placeholder(self, placeholder): # -> None:
        """Add a new placeholder shape base"""
        ...
    
    def ph_basename(self, ph_type): # -> str:
        """
        Return the base name fo"""
        ...
    
    @property
    def turbo_add_enabled(self): # -> bool:
        """True if "turbo-add" mode is enab"""
        ...
    
    @turbo_add_enabled.setter
    def turbo_add_enabled(self, value): # -> None:
        ...
    


class _BaseGroupShapes(_BaseShapes):
    """Base class for shape-trees that """
    def __init__(self, grpSp, parent) -> None:
        ...
    
    def add_chart(self, chart_type, x, y, cx, cy, chart_data): # -> Movie | Picture | Connector | GroupShape | Shape | GraphicFrame | BaseShape:
        """Add a new chart of *chart_type* """
        ...
    
    def add_connector(self, connector_type, begin_x, begin_y, end_x, end_y): # -> Movie | Picture | Connector | GroupShape | Shape | GraphicFrame | BaseShape:
        """Add a newly created connector sh"""
        ...
    
    def add_group_shape(self, shapes=...): # -> Movie | Picture | Connector | GroupShape | Shape | GraphicFrame | BaseShape:
        """Return a |GroupShape| object new"""
        ...
    
    def add_ole_object(self, object_file, prog_id, left, top, width=..., height=..., icon_file=...): # -> Movie | Picture | Connector | GroupShape | Shape | GraphicFrame | BaseShape:
        """Return newly-created GraphicFram"""
        ...
    
    def add_picture(self, image_file, left, top, width=..., height=...): # -> Movie | Picture | Connector | GroupShape | Shape | GraphicFrame | BaseShape:
        """Add picture shape displaying ima"""
        ...
    
    def add_shape(self, autoshape_type_id, left, top, width, height): # -> Movie | Picture | Connector | GroupShape | Shape | GraphicFrame | BaseShape:
        """Return new |Shape| object append"""
        ...
    
    def add_textbox(self, left, top, width, height): # -> Movie | Picture | Connector | GroupShape | Shape | GraphicFrame | BaseShape:
        """Return newly added text box shap"""
        ...
    
    def build_freeform(self, start_x=..., start_y=..., scale=...): # -> FreeformBuilder:
        """Return |FreeformBuilder| object """
        ...
    
    def index(self, shape): # -> int:
        """Return the index of *shape* in t"""
        ...
    


class GroupShapes(_BaseGroupShapes):
    """The sequence of child shapes bel"""
    ...


class SlideShapes(_BaseGroupShapes):
    """Sequence of shapes appearing on """
    def add_movie(self, movie_file, left, top, width, height, poster_frame_image=..., mime_type=...): # -> PicturePlaceholder | ChartPlaceholder | TablePlaceholder | SlidePlaceholder | PlaceholderGraphicFrame | PlaceholderPicture | Movie | Picture | Connector | GroupShape | Shape | GraphicFrame | BaseShape:
        """Return newly added movie shape d"""
        ...
    
    def add_table(self, rows, cols, left, top, width, height): # -> PicturePlaceholder | ChartPlaceholder | TablePlaceholder | SlidePlaceholder | PlaceholderGraphicFrame | PlaceholderPicture | Movie | Picture | Connector | GroupShape | Shape | GraphicFrame | BaseShape:
        """
        Add a |GraphicFrame| ob"""
        ...
    
    def clone_layout_placeholders(self, slide_layout): # -> None:
        """
        Add placeholder shapes """
        ...
    
    @property
    def placeholders(self):
        """
        Instance of |SlidePlace"""
        ...
    
    @property
    def title(self): # -> PicturePlaceholder | ChartPlaceholder | TablePlaceholder | SlidePlaceholder | PlaceholderGraphicFrame | PlaceholderPicture | Movie | Picture | Connector | GroupShape | Shape | GraphicFrame | BaseShape | None:
        """
        The title placeholder s"""
        ...
    


class LayoutShapes(_BaseShapes):
    """
    Sequence of shapes appearin"""
    ...


class MasterShapes(_BaseShapes):
    """
    Sequence of shapes appearin"""
    ...


class NotesSlideShapes(_BaseShapes):
    """
    Sequence of shapes appearin"""
    def ph_basename(self, ph_type): # -> str:
        """
        Return the base name fo"""
        ...
    


class BasePlaceholders(_BaseShapes):
    """
    Base class for placeholder """
    ...


class LayoutPlaceholders(BasePlaceholders):
    """
    Sequence of |LayoutPlacehol"""
    def get(self, idx, default=...): # -> Movie | Picture | Connector | GroupShape | Shape | GraphicFrame | BaseShape | None:
        """
        Return the first placeh"""
        ...
    


class MasterPlaceholders(BasePlaceholders):
    """
    Sequence of _MasterPlacehol"""
    def get(self, ph_type, default=...): # -> Movie | Picture | Connector | GroupShape | Shape | GraphicFrame | BaseShape | None:
        """
        Return the first placeh"""
        ...
    


class NotesSlidePlaceholders(MasterPlaceholders):
    """
    Sequence of placeholder sha"""
    ...


class SlidePlaceholders(ParentedElementProxy):
    """
    Collection of placeholder s"""
    def __getitem__(self, idx): # -> PicturePlaceholder | ChartPlaceholder | TablePlaceholder | SlidePlaceholder | PlaceholderGraphicFrame | PlaceholderPicture | Movie | Picture | Connector | GroupShape | Shape | GraphicFrame | BaseShape:
        """
        Access placeholder shap"""
        ...
    
    def __iter__(self): # -> Generator[PicturePlaceholder | ChartPlaceholder | TablePlaceholder | SlidePlaceholder | PlaceholderGraphicFrame | PlaceholderPicture | Movie | Picture | Connector | GroupShape | Shape | GraphicFrame | BaseShape, None, None]:
        """
        Generate placeholder sh"""
        ...
    
    def __len__(self): # -> int:
        """
        Return count of placeho"""
        ...
    


def BaseShapeFactory(shape_elm, parent): # -> Movie | Picture | Connector | GroupShape | Shape | GraphicFrame | BaseShape:
    """
    Return an instance of the a"""
    ...

def SlideShapeFactory(shape_elm, parent): # -> PicturePlaceholder | ChartPlaceholder | TablePlaceholder | SlidePlaceholder | PlaceholderGraphicFrame | PlaceholderPicture | Movie | Picture | Connector | GroupShape | Shape | GraphicFrame | BaseShape:
    """
    Return an instance of the a"""
    ...

class _MoviePicElementCreator:
    """Functional service object for cr"""
    def __init__(self, shapes, shape_id, movie_file, x, y, cx, cy, poster_frame_file, mime_type) -> None:
        ...
    
    @classmethod
    def new_movie_pic(cls, shapes, shape_id, movie_file, x, y, cx, cy, poster_frame_image, mime_type):
        """Return a new `p:pic` element con"""
        ...
    


class _OleObjectElementCreator:
    """Functional service object for cr"""
    def __init__(self, shapes, shape_id, ole_object_file, prog_id, x, y, cx, cy, icon_file) -> None:
        ...
    
    @classmethod
    def graphicFrame(cls, shapes, shape_id, ole_object_file, prog_id, x, y, cx, cy, icon_file):
        """Return new `p:graphicFrame` elem"""
        ...
    


