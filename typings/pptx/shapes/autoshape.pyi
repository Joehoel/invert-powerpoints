"""
This type stub file was generated by pyright.
"""

from pptx.shapes.base import BaseShape
from pptx.util import lazyproperty

"""Autoshape-related objects such a"""
class Adjustment:
    """
    An adjustment value for an """
    def __init__(self, name, def_val, actual=...) -> None:
        ...
    
    @property
    def effective_value(self): # -> float:
        """
        Read/write |float| repr"""
        ...
    
    @effective_value.setter
    def effective_value(self, value): # -> None:
        ...
    
    @property
    def val(self): # -> int:
        """
        Denormalized effective """
        ...
    


class AdjustmentCollection:
    """
    Sequence of |Adjustment| in"""
    def __init__(self, prstGeom) -> None:
        ...
    
    def __getitem__(self, key): # -> float:
        """Provides indexed access, (e.g. '"""
        ...
    
    def __setitem__(self, key, value): # -> None:
        """
        Provides item assignmen"""
        ...
    
    def __len__(self): # -> int:
        """Implement built-in function len("""
        ...
    


class AutoShapeType:
    """
    Return an instance of |Auto"""
    _instances = ...
    def __new__(cls, autoshape_type_id):
        """
        Only create new instanc"""
        ...
    
    def __init__(self, autoshape_type_id) -> None:
        """Initialize attributes from const"""
        ...
    
    @property
    def autoshape_type_id(self): # -> Unknown:
        """
        MSO_AUTO_SHAPE_TYPE enu"""
        ...
    
    @property
    def basename(self): # -> str | tuple[()] | tuple[tuple[Literal['adj1'], Literal[16200000]], tuple[Literal['adj2'], Literal[0]]] | tuple[tuple[Literal['adj1'], Literal[-20833]], tuple[Literal['adj2'], Literal[62500]], tuple[Literal['adj3'], Literal[16667]]] | tuple[tuple[Literal['adj1'], Literal[25000]], tuple[Literal['adj2'], Literal[25000]], tuple[Literal['adj3'], Literal[25000]], tuple[Literal['adj4'], Literal[43750]]] | tuple[tuple[Literal['adj1'], Literal[25000]], tuple[Literal['adj2'], Literal[25000]], tuple[Literal['adj3'], Literal[25000]]] | tuple[tuple[Literal['adj'], Literal[12500]]] | tuple[tuple[Literal['adj1'], Literal[10800000]], tuple[Literal['adj2'], Literal[0]], tuple[Literal['adj3'], Literal[25000]]] | tuple[tuple[Literal['adj'], Literal[25000]]] | tuple[tuple[Literal['adj'], Literal[50000]]] | tuple[tuple[Literal['adj1'], Literal[2700000]], tuple[Literal['adj2'], Literal[16200000]]] | tuple[tuple[Literal['adj1'], Literal[12500]], tuple[Literal['adj2'], Literal[1142319]], tuple[Literal['adj3'], Literal[20457681]], tuple[Literal['adj4'], Literal[10800000]], tuple[Literal['adj5'], Literal[12500]]] | tuple[tuple[Literal['adj1'], Literal[-20833]], tuple[Literal['adj2'], Literal[62500]]] | tuple[tuple[Literal['adj1'], Literal[50000]], tuple[Literal['adj2'], Literal[50000]]] | tuple[tuple[Literal['adj1'], Literal[25000]], tuple[Literal['adj2'], Literal[50000]], tuple[Literal['adj3'], Literal[25000]]] | tuple[tuple[Literal['adj1'], Literal[25000]], tuple[Literal['adj2'], Literal[50000]], tuple[Literal['adj3'], Literal[12500]]] | tuple[tuple[Literal['vf'], Literal[105146]]] | tuple[tuple[Literal['adj'], Literal[8333]]] | tuple[tuple[Literal['adj'], Literal[16667]]] | tuple[tuple[Literal['adj1'], Literal[6250]], tuple[Literal['adj2'], Literal[0]]] | tuple[tuple[Literal['adj1'], Literal[25000]], tuple[Literal['adj2'], Literal[25000]], tuple[Literal['adj3'], Literal[25000]], tuple[Literal['adj4'], Literal[64977]]] | tuple[tuple[Literal['adj1'], Literal[16667]], tuple[Literal['adj2'], Literal[50000]]]:
        """
        Base of shape name (les"""
        ...
    
    @classmethod
    def default_adjustment_values(cls, prst): # -> str | tuple[()] | tuple[tuple[Literal['adj1'], Literal[16200000]], tuple[Literal['adj2'], Literal[0]]] | tuple[tuple[Literal['adj1'], Literal[-20833]], tuple[Literal['adj2'], Literal[62500]], tuple[Literal['adj3'], Literal[16667]]] | tuple[tuple[Literal['adj1'], Literal[25000]], tuple[Literal['adj2'], Literal[25000]], tuple[Literal['adj3'], Literal[25000]], tuple[Literal['adj4'], Literal[43750]]] | tuple[tuple[Literal['adj1'], Literal[25000]], tuple[Literal['adj2'], Literal[25000]], tuple[Literal['adj3'], Literal[25000]]] | tuple[tuple[Literal['adj'], Literal[12500]]] | tuple[tuple[Literal['adj1'], Literal[10800000]], tuple[Literal['adj2'], Literal[0]], tuple[Literal['adj3'], Literal[25000]]] | tuple[tuple[Literal['adj'], Literal[25000]]] | tuple[tuple[Literal['adj'], Literal[50000]]] | tuple[tuple[Literal['adj1'], Literal[2700000]], tuple[Literal['adj2'], Literal[16200000]]] | tuple[tuple[Literal['adj1'], Literal[12500]], tuple[Literal['adj2'], Literal[1142319]], tuple[Literal['adj3'], Literal[20457681]], tuple[Literal['adj4'], Literal[10800000]], tuple[Literal['adj5'], Literal[12500]]] | tuple[tuple[Literal['adj1'], Literal[-20833]], tuple[Literal['adj2'], Literal[62500]]] | tuple[tuple[Literal['adj1'], Literal[50000]], tuple[Literal['adj2'], Literal[50000]]] | tuple[tuple[Literal['adj1'], Literal[25000]], tuple[Literal['adj2'], Literal[50000]], tuple[Literal['adj3'], Literal[25000]]] | tuple[tuple[Literal['adj1'], Literal[25000]], tuple[Literal['adj2'], Literal[50000]], tuple[Literal['adj3'], Literal[12500]]] | tuple[tuple[Literal['vf'], Literal[105146]]] | tuple[tuple[Literal['adj'], Literal[8333]]] | tuple[tuple[Literal['adj'], Literal[16667]]] | tuple[tuple[Literal['adj1'], Literal[6250]], tuple[Literal['adj2'], Literal[0]]] | tuple[tuple[Literal['adj1'], Literal[25000]], tuple[Literal['adj2'], Literal[25000]], tuple[Literal['adj3'], Literal[25000]], tuple[Literal['adj4'], Literal[64977]]] | tuple[tuple[Literal['adj1'], Literal[16667]], tuple[Literal['adj2'], Literal[50000]]]:
        """
        Return sequence of name"""
        ...
    
    @property
    def desc(self):
        """Informal description of this aut"""
        ...
    
    @classmethod
    def id_from_prst(cls, prst):
        """
        Return auto shape id (e"""
        ...
    
    @property
    def prst(self):
        """
        Preset geometry identif"""
        ...
    


class Shape(BaseShape):
    """A shape that can appear on a sli"""
    def __init__(self, sp, parent) -> None:
        ...
    
    @lazyproperty
    def adjustments(self): # -> AdjustmentCollection:
        """
        Read-only reference to """
        ...
    
    @property
    def auto_shape_type(self):
        """
        Enumeration value ident"""
        ...
    
    @lazyproperty
    def fill(self): # -> FillFormat:
        """
        |FillFormat| instance f"""
        ...
    
    def get_or_add_ln(self):
        """
        Return the ``<a:ln>`` e"""
        ...
    
    @property
    def has_text_frame(self): # -> Literal[True]:
        """
        |True| if this shape ca"""
        ...
    
    @lazyproperty
    def line(self): # -> LineFormat:
        """
        |LineFormat| instance f"""
        ...
    
    @property
    def ln(self):
        """
        The ``<a:ln>`` element """
        ...
    
    @property
    def shape_type(self):
        """
        Unique integer identify"""
        ...
    
    @property
    def text(self): # -> str:
        """Read/write. Unicode (str in Pyth"""
        ...
    
    @text.setter
    def text(self, text): # -> None:
        ...
    
    @property
    def text_frame(self): # -> TextFrame:
        """|TextFrame| instance for this sh"""
        ...
    


