"""
This type stub file was generated by pyright.
"""

from pptx.shared import ElementProxy, ParentedElementProxy, PartElementProxy
from pptx.util import lazyproperty

"""Slide-related objects, including"""
class _BaseSlide(PartElementProxy):
    """Base class for slide objects, in"""
    @lazyproperty
    def background(self): # -> _Background:
        """|_Background| object providing s"""
        ...
    
    @property
    def name(self):
        """
        String representing the"""
        ...
    
    @name.setter
    def name(self, value): # -> None:
        ...
    


class _BaseMaster(_BaseSlide):
    """
    Base class for master objec"""
    @lazyproperty
    def placeholders(self): # -> MasterPlaceholders:
        """
        Instance of |MasterPlac"""
        ...
    
    @lazyproperty
    def shapes(self): # -> MasterShapes:
        """
        Instance of |MasterShap"""
        ...
    


class NotesMaster(_BaseMaster):
    """
    Proxy for the notes master """
    ...


class NotesSlide(_BaseSlide):
    """Notes slide object.

    Provide"""
    def clone_master_placeholders(self, notes_master): # -> None:
        """Selectively add placeholder shap"""
        ...
    
    @property
    def notes_placeholder(self): # -> None:
        """
        Return the notes placeh"""
        ...
    
    @property
    def notes_text_frame(self): # -> None:
        """
        Return the text frame o"""
        ...
    
    @lazyproperty
    def placeholders(self): # -> NotesSlidePlaceholders:
        """
        An instance of |NotesSl"""
        ...
    
    @lazyproperty
    def shapes(self): # -> NotesSlideShapes:
        """
        An instance of |NotesSl"""
        ...
    


class Slide(_BaseSlide):
    """Slide object. Provides access to"""
    @property
    def background(self):
        """|_Background| object providing s"""
        ...
    
    @property
    def follow_master_background(self): # -> bool:
        """|True| if this slide inherits th"""
        ...
    
    @property
    def has_notes_slide(self):
        """
        Return True if this sli"""
        ...
    
    @property
    def notes_slide(self):
        """
        Return the |NotesSlide|"""
        ...
    
    @lazyproperty
    def placeholders(self): # -> SlidePlaceholders:
        """
        Instance of |SlidePlace"""
        ...
    
    @lazyproperty
    def shapes(self): # -> SlideShapes:
        """
        Instance of |SlideShape"""
        ...
    
    @property
    def slide_id(self):
        """
        The integer value that """
        ...
    
    @property
    def slide_layout(self):
        """
        |SlideLayout| object th"""
        ...
    


class Slides(ParentedElementProxy):
    """
    Sequence of slides belongin"""
    def __init__(self, sldIdLst, prs) -> None:
        ...
    
    def __getitem__(self, idx):
        """
        Provide indexed access,"""
        ...
    
    def __iter__(self): # -> Generator[Unknown, None, None]:
        """
        Support iteration (e.g."""
        ...
    
    def __len__(self): # -> int:
        """
        Support len() built-in """
        ...
    
    def add_slide(self, slide_layout):
        """
        Return a newly added sl"""
        ...
    
    def get(self, slide_id, default=...): # -> None:
        """
        Return the slide identi"""
        ...
    
    def index(self, slide): # -> int:
        """
        Map *slide* to an integ"""
        ...
    


class SlideLayout(_BaseSlide):
    """
    Slide layout object. Provid"""
    def iter_cloneable_placeholders(self): # -> Generator[Unknown, None, None]:
        """
        Generate a reference to"""
        ...
    
    @lazyproperty
    def placeholders(self): # -> LayoutPlaceholders:
        """
        Instance of |LayoutPlac"""
        ...
    
    @lazyproperty
    def shapes(self): # -> LayoutShapes:
        """
        Instance of |LayoutShap"""
        ...
    
    @property
    def slide_master(self):
        """
        Slide master from which"""
        ...
    
    @property
    def used_by_slides(self): # -> tuple[Unknown, ...]:
        """Tuple of slide objects based on """
        ...
    


class SlideLayouts(ParentedElementProxy):
    """Sequence of slide layouts belong"""
    def __init__(self, sldLayoutIdLst, parent) -> None:
        ...
    
    def __getitem__(self, idx):
        """
        Provide indexed access,"""
        ...
    
    def __iter__(self): # -> Generator[Unknown, None, None]:
        """
        Generate a reference to"""
        ...
    
    def __len__(self): # -> int:
        """
        Support len() built-in """
        ...
    
    def get_by_name(self, name, default=...): # -> None:
        """Return SlideLayout object having"""
        ...
    
    def index(self, slide_layout): # -> int:
        """Return zero-based index of *slid"""
        ...
    
    def remove(self, slide_layout): # -> None:
        """Remove *slide_layout* from the c"""
        ...
    


class SlideMaster(_BaseMaster):
    """
    Slide master object. Provid"""
    @lazyproperty
    def slide_layouts(self): # -> SlideLayouts:
        """|SlideLayouts| object providing """
        ...
    


class SlideMasters(ParentedElementProxy):
    """Sequence of |SlideMaster| object"""
    def __init__(self, sldMasterIdLst, parent) -> None:
        ...
    
    def __getitem__(self, idx):
        """
        Provide indexed access,"""
        ...
    
    def __iter__(self): # -> Generator[Unknown, None, None]:
        """
        Generate a reference to"""
        ...
    
    def __len__(self): # -> int:
        """
        Support len() built-in """
        ...
    


class _Background(ElementProxy):
    """Provides access to slide backgro"""
    def __init__(self, cSld) -> None:
        ...
    
    @lazyproperty
    def fill(self): # -> FillFormat:
        """|FillFormat| instance for this b"""
        ...
    


