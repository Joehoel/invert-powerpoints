"""
This type stub file was generated by pyright.
"""

"""
DrawingML objects related to co"""
class ColorFormat:
    """
    Provides access to color se"""
    def __init__(self, eg_colorChoice_parent, color) -> None:
        ...
    
    @property
    def brightness(self): # -> Literal[0]:
        """
        Read/write float value """
        ...
    
    @brightness.setter
    def brightness(self, value): # -> None:
        ...
    
    @classmethod
    def from_colorchoice_parent(cls, eg_colorChoice_parent): # -> Self@ColorFormat:
        ...
    
    @property
    def rgb(self): # -> RGBColor:
        """
        |RGBColor| value of thi"""
        ...
    
    @rgb.setter
    def rgb(self, rgb): # -> None:
        ...
    
    @property
    def theme_color(self):
        """Theme color value of this color."""
        ...
    
    @theme_color.setter
    def theme_color(self, mso_theme_color_idx): # -> None:
        ...
    
    @property
    def type(self):
        """
        Read-only. A value from"""
        ...
    


class _Color:
    """
    Object factory for color ob"""
    def __new__(cls, xClr): # -> _NoneColor | _HslColor | _PrstColor | _SchemeColor | _ScRgbColor | _SRgbColor | _SysColor:
        ...
    
    def __init__(self, xClr) -> None:
        ...
    
    @property
    def brightness(self): # -> Literal[0]:
        ...
    
    @brightness.setter
    def brightness(self, value): # -> None:
        ...
    
    @property
    def color_type(self):
        ...
    
    @property
    def rgb(self):
        """
        Raises TypeError on acc"""
        ...
    
    @property
    def theme_color(self):
        """
        Raises TypeError on acc"""
        ...
    


class _HslColor(_Color):
    @property
    def color_type(self):
        ...
    


class _NoneColor(_Color):
    @property
    def color_type(self): # -> None:
        ...
    
    @property
    def theme_color(self):
        """
        Raise TypeError on atte"""
        ...
    


class _PrstColor(_Color):
    @property
    def color_type(self):
        ...
    


class _SchemeColor(_Color):
    def __init__(self, schemeClr) -> None:
        ...
    
    @property
    def color_type(self):
        ...
    
    @property
    def theme_color(self):
        """
        Theme color value of th"""
        ...
    
    @theme_color.setter
    def theme_color(self, mso_theme_color_idx): # -> None:
        ...
    


class _ScRgbColor(_Color):
    @property
    def color_type(self):
        ...
    


class _SRgbColor(_Color):
    def __init__(self, srgbClr) -> None:
        ...
    
    @property
    def color_type(self):
        ...
    
    @property
    def rgb(self): # -> RGBColor:
        """
        |RGBColor| value of thi"""
        ...
    
    @rgb.setter
    def rgb(self, rgb): # -> None:
        ...
    


class _SysColor(_Color):
    @property
    def color_type(self):
        ...
    


class RGBColor(tuple):
    """
    Immutable value object defi"""
    def __new__(cls, r, g, b): # -> Self@RGBColor:
        ...
    
    def __str__(self) -> str:
        """
        Return a hex string rgb"""
        ...
    
    @classmethod
    def from_string(cls, rgb_hex_str): # -> Self@RGBColor:
        """
        Return a new instance f"""
        ...
    


